name: Monthly Repository Maintenance

on:
  schedule:
    # Run on 1st of each month at 00:00 UTC
    - cron: '0 0 1 * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  maintenance:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for git operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install pyyaml requests

      - name: Run maintenance (dry-run)
        id: dry_run
        run: |
          echo "Running maintenance in dry-run mode..."
          python scripts/utilities/repo-maintenance.py --dry-run --full --verbose > maintenance-preview.txt 2>&1
          cat maintenance-preview.txt

      - name: Run maintenance (actual)
        if: success()
        id: actual_run
        run: |
          echo "Running actual maintenance..."
          python scripts/utilities/repo-maintenance.py --full --force --verbose
        continue-on-error: true

      - name: Upload maintenance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report-${{ github.run_number }}
          path: |
            docs/reports/maintenance-*.json
            maintenance-preview.txt
          retention-days: 90

      - name: Create issue for errors
        if: steps.actual_run.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('docs/reports/maintenance-' +
              new Date().toISOString().split('T')[0] + '.json', 'utf8');
            const data = JSON.parse(report);

            const body = `## ðŸš¨ Maintenance Errors Detected

            **Date:** ${new Date().toISOString()}
            **Exit Code:** ${data.exit_code}

            ### Errors (${data.errors.length})
            ${data.errors.map(e => `- ${e}`).join('\n')}

            ### Warnings (${data.warnings.length})
            ${data.warnings.map(w => `- ${w}`).join('\n')}

            ### Statistics
            \`\`\`json
            ${JSON.stringify(data.statistics, null, 2)}
            \`\`\`

            **Action Required:** Please review the maintenance report and address critical issues.

            [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Maintenance] Critical errors detected - ${new Date().toISOString().split('T')[0]}`,
              body: body,
              labels: ['maintenance', 'automated']
            });

      - name: Check exit code
        if: steps.actual_run.outcome == 'failure'
        run: |
          echo "::error::Maintenance found critical errors"
          exit 1

      - name: Success summary
        if: steps.actual_run.outcome == 'success'
        run: |
          echo "âœ… Maintenance completed successfully"
          if [ -f "docs/reports/maintenance-$(date +%Y-%m-%d).json" ]; then
            cat docs/reports/maintenance-$(date +%Y-%m-%d).json | jq '.statistics'
          fi

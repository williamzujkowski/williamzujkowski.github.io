name: Citation Link Validation

on:
  schedule:
    - cron: '0 9 * * 1'  # Monday 9 AM UTC
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: read
  issues: write

jobs:
  validate-citations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 playwright aiohttp certifi
          playwright install chromium

      - name: Extract citation links
        id: extract
        run: |
          python scripts/link-validation/link-extractor.py \
            --posts-dir src/posts \
            --output citation-links.json \
            --citations-only

          # Count total citations
          TOTAL_CITATIONS=$(jq '.links | length' citation-links.json)
          echo "total_citations=$TOTAL_CITATIONS" >> $GITHUB_OUTPUT
          echo "Found $TOTAL_CITATIONS citation links to validate"

      - name: Validate citation links
        id: validate
        run: |
          python scripts/link-validation/link-validator.py \
            --input citation-links.json \
            --output citation-validation.json \
            --max-retries 3 \
            --timeout 30

          # Check if any broken links found
          BROKEN_COUNT=$(jq '[.results[] | select(.status == "broken")] | length' citation-validation.json)
          echo "broken_count=$BROKEN_COUNT" >> $GITHUB_OUTPUT
          echo "Found $BROKEN_COUNT broken citation links"

          # Extract validation stats
          VALID_COUNT=$(jq '.stats.valid' citation-validation.json)
          REDIRECT_COUNT=$(jq '.stats.redirects' citation-validation.json)
          TIMEOUT_COUNT=$(jq '.stats.timeouts' citation-validation.json)
          ERROR_COUNT=$(jq '.stats.errors' citation-validation.json)

          echo "valid_count=$VALID_COUNT" >> $GITHUB_OUTPUT
          echo "redirect_count=$REDIRECT_COUNT" >> $GITHUB_OUTPUT
          echo "timeout_count=$TIMEOUT_COUNT" >> $GITHUB_OUTPUT
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT

      - name: Generate markdown report
        if: steps.validate.outputs.broken_count > 0
        run: |
          python scripts/link-validation/citation-report.py \
            --input citation-validation.json \
            --links citation-links.json \
            --output citation-report.md

      - name: Create or update issue
        if: steps.validate.outputs.broken_count > 0
        uses: actions/github-script@v7
        env:
          BROKEN_COUNT: ${{ steps.validate.outputs.broken_count }}
          VALID_COUNT: ${{ steps.validate.outputs.valid_count }}
          REDIRECT_COUNT: ${{ steps.validate.outputs.redirect_count }}
          TIMEOUT_COUNT: ${{ steps.validate.outputs.timeout_count }}
          ERROR_COUNT: ${{ steps.validate.outputs.error_count }}
          TOTAL_CITATIONS: ${{ steps.extract.outputs.total_citations }}
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('citation-report.md', 'utf8');
            const date = new Date().toISOString().split('T')[0];

            const title = '🔗 Broken Citation Links Detected';
            const body = [
              '## Citation Validation Report',
              '',
              `**Date:** ${date}`,
              `**Total Citations Checked:** ${process.env.TOTAL_CITATIONS}`,
              '**Validation Results:**',
              `- ✅ Valid: ${process.env.VALID_COUNT}`,
              `- ❌ Broken: ${process.env.BROKEN_COUNT}`,
              `- ↪️  Redirects: ${process.env.REDIRECT_COUNT}`,
              `- ⏱️  Timeouts: ${process.env.TIMEOUT_COUNT}`,
              `- ⚠️  Errors: ${process.env.ERROR_COUNT}`,
              '',
              '---',
              '',
              report,
              '',
              '---',
              '',
              '**Actions Required:**',
              '1. Review broken links above',
              '2. Find replacement sources or remove citations',
              '3. Update blog posts with fixes',
              '4. Re-run validation to verify fixes',
              '',
              '*This issue was automatically generated by the citation validation workflow.*',
              '*Run manually: Actions → Citation Link Validation → Run workflow*'
            ].join('\n');

            // Check for existing open issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['automated', 'citation-validation']
            });

            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: body
              });
              console.log(`Updated existing issue #${issues.data[0].number}`);
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['automated', 'citation-validation', 'maintenance']
              });
              console.log(`Created new issue #${newIssue.data.number}`);
            }

      - name: Comment on success
        if: steps.validate.outputs.broken_count == 0
        run: |
          echo "✅ All ${{ steps.extract.outputs.total_citations }} citation links are valid!"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: citation-validation-report
          path: |
            citation-links.json
            citation-validation.json
            citation-report.md
          retention-days: 30

#!/usr/bin/env python3
"""
SCRIPT: generate_script_catalog.py
PURPOSE: Generate comprehensive catalog of all scripts
CATEGORY: documentation
LLM_READY: True
VERSION: 1.0.0
UPDATED: 2025-09-20T19:15:00-04:00

DESCRIPTION:
    Generates SCRIPT_CATALOG.md with details of all Python scripts
    in the repository, organized by category and purpose.

LLM_USAGE:
    python scripts/generate_script_catalog.py

DEPENDENCIES:
    - Python 3.8+
    - scripts/lib/common.py for shared utilities

MANIFEST_REGISTRY: scripts/generate_script_catalog.py
"""

import json
import sys
from pathlib import Path
import re

sys.path.append(str(Path(__file__).parent))
from lib.common import ManifestManager, TimeManager, Logger

class ScriptCatalogGenerator:
    """Generate comprehensive script catalog documentation"""

    def __init__(self):
        self.logger = Logger.get_logger(self.__class__.__name__)
        self.manifest_mgr = ManifestManager()
        self.time_mgr = TimeManager()

    def generate_catalog(self, output_path: str = "docs/GUIDES/SCRIPT_CATALOG.md") -> str:
        """Generate script catalog from current scripts"""

        manifest = self.manifest_mgr.manifest
        timestamp = self.time_mgr.get_current_timestamp()

        # Get all Python scripts
        scripts = {}
        for filepath, metadata in manifest.get('inventory', {}).get('files', {}).get('file_registry', {}).items():
            if filepath.endswith('.py') and filepath.startswith('scripts/'):
                scripts[filepath] = metadata

        # Categorize scripts
        categories = {
            'blog': [],
            'validation': [],
            'documentation': [],
            'utility': [],
            'image': [],
            'research': [],
            'other': []
        }

        for script_path in scripts:
            script_name = Path(script_path).name
            if 'blog' in script_name:
                categories['blog'].append(script_name)
            elif 'validate' in script_name or 'check' in script_name:
                categories['validation'].append(script_name)
            elif 'doc' in script_name or 'generate' in script_name:
                categories['documentation'].append(script_name)
            elif 'image' in script_name:
                categories['image'].append(script_name)
            elif 'research' in script_name or 'academic' in script_name:
                categories['research'].append(script_name)
            elif any(x in script_name for x in ['audit', 'remove', 'update', 'optimize']):
                categories['utility'].append(script_name)
            else:
                categories['other'].append(script_name)

        doc_content = f"""# üìö Script Catalog

**Generated:** {timestamp}
**Total Scripts:** {len(scripts)}

## Categories

### üìù Blog Management ({len(categories['blog'])} scripts)
"""
        for script in sorted(categories['blog']):
            doc_content += f"- `{script}`\n"

        doc_content += f"\n### ‚úÖ Validation ({len(categories['validation'])} scripts)\n"
        for script in sorted(categories['validation']):
            doc_content += f"- `{script}`\n"

        doc_content += f"\n### üìñ Documentation ({len(categories['documentation'])} scripts)\n"
        for script in sorted(categories['documentation']):
            doc_content += f"- `{script}`\n"

        doc_content += f"\n### üñºÔ∏è Image Management ({len(categories['image'])} scripts)\n"
        for script in sorted(categories['image']):
            doc_content += f"- `{script}`\n"

        doc_content += f"\n### üî¨ Research ({len(categories['research'])} scripts)\n"
        for script in sorted(categories['research']):
            doc_content += f"- `{script}`\n"

        doc_content += f"\n### üîß Utilities ({len(categories['utility'])} scripts)\n"
        for script in sorted(categories['utility']):
            doc_content += f"- `{script}`\n"

        if categories['other']:
            doc_content += f"\n### üì¶ Other ({len(categories['other'])} scripts)\n"
            for script in sorted(categories['other']):
                doc_content += f"- `{script}`\n"

        doc_content += "\n---\n*Auto-generated by `scripts/generate_script_catalog.py`*\n"

        # Write the document
        doc_path = Path(output_path)
        doc_path.parent.mkdir(parents=True, exist_ok=True)
        doc_path.write_text(doc_content)

        self.logger.info(f"Generated {output_path}")
        return doc_content

def main():
    generator = ScriptCatalogGenerator()
    generator.generate_catalog()
    print("‚úÖ Generated SCRIPT_CATALOG.md")
    return 0

if __name__ == "__main__":
    sys.exit(main())
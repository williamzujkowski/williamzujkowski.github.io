#!/usr/bin/env python3
"""
SCRIPT: generate_weekly_summary.py
PURPOSE: Generate weekly repository health summary
CATEGORY: monitoring
LLM_READY: True
VERSION: 1.0.0
UPDATED: 2025-09-20T22:10:00-04:00

DESCRIPTION:
    Generates a weekly summary report of repository activity,
    health trends, and recommendations.

LLM_USAGE:
    python scripts/generate_weekly_summary.py

ARGUMENTS:
    None

EXAMPLES:
    python scripts/generate_weekly_summary.py

OUTPUT:
    - Weekly summary in reports/weekly_summary.md
    - Summary data in reports/weekly_summary.json

DEPENDENCIES:
    - Python 3.8+
    - scripts/lib/common.py

MANIFEST_REGISTRY: scripts/generate_weekly_summary.py
"""

import json
from pathlib import Path
from datetime import datetime, timedelta
import subprocess
import sys
sys.path.append(str(Path(__file__).parent))
from lib.common import TimeManager, Logger

def generate_weekly_summary():
    """Generate weekly summary report"""

    time_mgr = TimeManager()
    logger = Logger.get_logger('WeeklySummary')

    logger.info("Generating Weekly Summary Report...")

    summary = {
        "week_ending": time_mgr.get_current_timestamp(),
        "commits": get_weekly_commits(),
        "issues_closed": get_issues_closed(),
        "test_performance": get_test_trends(),
        "compliance_history": get_compliance_history(),
        "health_trends": analyze_health_trends(),
        "recommendations": []
    }

    # Generate recommendations
    if len(summary["commits"]) < 3:
        summary["recommendations"].append("Low commit activity - consider scheduling regular updates")

    if summary["test_performance"].get("avg_pass_rate", 100) < 90:
        summary["recommendations"].append("Test pass rate below 90% - review failing tests")

    if not summary["recommendations"]:
        summary["recommendations"].append("Repository health is excellent - keep up the good work!")

    # Create report
    report = f"""# üìÖ Weekly Repository Summary

**Week Ending:** {summary['week_ending']}

## üìà Activity Metrics

- **Commits This Week:** {len(summary['commits'])}
- **Issues Closed:** {summary['issues_closed']}
- **Tests Run:** {summary['test_performance'].get('total_runs', 0)}
- **Average Pass Rate:** {summary['test_performance'].get('avg_pass_rate', 'N/A')}%

## üéØ Compliance Trend

{summary['compliance_history']}

## üìä Health Trends

"""

    for trend in summary["health_trends"]:
        report += f"- {trend}\n"

    report += """
## üîÑ Recent Commits

"""
    for commit in summary["commits"][:10]:
        report += f"- {commit}\n"

    report += """
## üí° Recommendations

"""

    for rec in summary["recommendations"]:
        report += f"- {rec}\n"

    report += """
## üìÖ Next Week Goals

1. Maintain 100% standards compliance
2. Keep test pass rate above 90%
3. Update MANIFEST.json daily
4. Review and consolidate duplicate scripts
5. Monitor for vestigial content

---
*Generated by Weekly Summary System*
"""

    # Save report
    report_path = Path("reports/weekly_summary.md")
    report_path.parent.mkdir(exist_ok=True)
    report_path.write_text(report)

    # Save JSON summary
    json_path = Path("reports/weekly_summary.json")
    json_path.write_text(json.dumps(summary, indent=2))

    logger.info(f"Weekly summary saved to {report_path}")
    return summary

def get_weekly_commits():
    """Get commits from past week"""
    try:
        result = subprocess.run(
            ["git", "log", "--since='1 week ago'", "--oneline"],
            capture_output=True,
            text=True,
            timeout=10
        )
        return result.stdout.strip().split("\n") if result.stdout else []
    except:
        return []

def get_issues_closed():
    """Get count of issues closed (placeholder)"""
    # Would use GitHub API in production
    return "N/A (GitHub API not configured)"

def get_test_trends():
    """Analyze test performance over the week"""
    # Check if test report exists
    test_report_path = Path("reports/test_report.json")
    if test_report_path.exists():
        try:
            report = json.loads(test_report_path.read_text())
            total = report["summary"]["total_categories"]
            passed = report["summary"]["passed_categories"]
            pass_rate = (passed / total * 100) if total > 0 else 0
            return {"total_runs": 1, "avg_pass_rate": round(pass_rate, 1)}
        except:
            pass
    return {"total_runs": 0, "avg_pass_rate": "N/A"}

def get_compliance_history():
    """Get compliance history for the week"""
    # Check current compliance
    try:
        result = subprocess.run(
            ["python", "scripts/validate_standards.py"],
            capture_output=True,
            text=True,
            timeout=30
        )
        if "FAIL" not in result.stdout:
            return "‚úÖ Maintained standards compliance"
        else:
            return "‚ö†Ô∏è Some compliance issues detected"
    except:
        return "Unable to determine compliance status"

def analyze_health_trends():
    """Analyze repository health trends"""
    trends = []

    # Check if health metrics exist
    metrics_path = Path("reports/health_metrics.json")
    if metrics_path.exists():
        try:
            metrics = json.loads(metrics_path.read_text())
            if metrics["repository_health"]["manifest_current"]:
                trends.append("‚úÖ MANIFEST.json kept current")
            else:
                trends.append("‚ö†Ô∏è MANIFEST.json needs updating")

            if metrics["compliance_status"]["overall"]:
                trends.append("‚úÖ Standards compliance maintained")

            alert_count = len(metrics.get("alerts", []))
            if alert_count == 0:
                trends.append("‚úÖ No critical alerts")
            else:
                trends.append(f"‚ö†Ô∏è {alert_count} alerts need attention")
        except:
            pass

    if not trends:
        trends.append("Health metrics pending generation")

    return trends

if __name__ == "__main__":
    generate_weekly_summary()
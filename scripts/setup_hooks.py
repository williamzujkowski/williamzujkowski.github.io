#!/usr/bin/env python3
"""
SCRIPT: setup_hooks.py
PURPOSE: Set up pre-commit hooks for standards enforcement
CATEGORY: utilities
LLM_READY: True
VERSION: 1.0.0
UPDATED: 2025-09-20T16:25:00-04:00

DESCRIPTION:
    Installs Git pre-commit hooks that enforce standards before allowing
    commits. This ensures all changes comply with repository standards
    before they can be committed.

LLM_USAGE:
    python scripts/setup_hooks.py [options]

ARGUMENTS:
    --force (bool): Overwrite existing hooks
    --test (bool): Test hooks after installation

EXAMPLES:
    # Install hooks
    python scripts/setup_hooks.py

    # Force reinstall and test
    python scripts/setup_hooks.py --force --test

OUTPUT:
    - Pre-commit hook installed in .git/hooks/pre-commit
    - Test results if --test is used

DEPENDENCIES:
    - Python 3.8+
    - Git repository

MANIFEST_REGISTRY: scripts/setup_hooks.py
"""

import os
import sys
from pathlib import Path


def setup_pre_commit_hook(force: bool = False):
    """Install pre-commit hook for standards enforcement"""

    hook_content = """#!/bin/bash
# Pre-commit hook for standards enforcement
# Generated by scripts/setup_hooks.py

echo "üîç Running pre-commit standards validation..."

# 1. Check if MANIFEST.json exists
if [ ! -f "MANIFEST.json" ]; then
    echo "‚ùå MANIFEST.json not found"
    exit 1
fi

# 2. Validate manifest structure
echo "  Checking MANIFEST.json..."
python scripts/validate_manifest.py 2>/dev/null
if [ $? -ne 0 ]; then
    # Create simple validator if it doesn't exist
    python -c "
import json
import sys
try:
    with open('MANIFEST.json', 'r') as f:
        manifest = json.load(f)
    if 'version' not in manifest:
        print('‚ùå MANIFEST.json invalid')
        sys.exit(1)
    print('‚úÖ MANIFEST.json valid')
except Exception as e:
    print(f'‚ùå MANIFEST.json error: {e}')
    sys.exit(1)
"
    if [ $? -ne 0 ]; then
        echo "‚ùå MANIFEST.json validation failed"
        exit 1
    fi
fi

# 3. Check for duplicate files being added
echo "  Checking for duplicates..."
python -c "
import json
import subprocess
import sys
from pathlib import Path

# Get staged files
result = subprocess.run(['git', 'diff', '--cached', '--name-only'],
                       capture_output=True, text=True)
staged_files = result.stdout.strip().split('\\n') if result.stdout else []

# Load manifest
try:
    with open('MANIFEST.json', 'r') as f:
        manifest = json.load(f)
    file_registry = manifest.get('inventory', {}).get('files', {}).get('file_registry', {})
except:
    file_registry = {}

# Check for duplicates
duplicates = []
for staged in staged_files:
    if not staged:
        continue
    staged_name = Path(staged).name
    for registered in file_registry.keys():
        if Path(registered).name == staged_name and registered != staged:
            duplicates.append((staged, registered))

if duplicates:
    print('‚ùå Duplicate files detected:')
    for new, existing in duplicates:
        print(f'  {new} duplicates {existing}')
    sys.exit(1)
else:
    print('‚úÖ No duplicates found')
"
if [ $? -ne 0 ]; then
    echo "‚ùå Duplicate file check failed"
    echo "   Please check file_registry in MANIFEST.json before creating new files"
    exit 1
fi

# 4. Check standards compliance (simplified)
echo "  Checking standards compliance..."
if [ -f ".claude-rules.json" ]; then
    python -c "
import json
import sys
try:
    with open('.claude-rules.json', 'r') as f:
        rules = json.load(f)
    print('‚úÖ Standards rules loaded')
except:
    print('‚ö†Ô∏è  Could not load .claude-rules.json')
"
fi

# 5. Update manifest with staged changes
echo "  Updating MANIFEST.json..."
python -c "
import json
import subprocess
from datetime import datetime
from pathlib import Path

# Get staged files
result = subprocess.run(['git', 'diff', '--cached', '--name-only'],
                       capture_output=True, text=True)
staged_files = result.stdout.strip().split('\\n') if result.stdout else []

if staged_files and staged_files[0]:
    # Load manifest
    with open('MANIFEST.json', 'r') as f:
        manifest = json.load(f)

    # Update last_validated
    manifest['last_validated'] = datetime.now().strftime('%Y-%m-%dT%H:%M:%S-04:00')

    # Save manifest
    with open('MANIFEST.json', 'w') as f:
        json.dump(manifest, f, indent=2)

    # Stage the updated manifest
    subprocess.run(['git', 'add', 'MANIFEST.json'])
    print('‚úÖ MANIFEST.json updated')
"

echo "‚úÖ Pre-commit validation passed"
exit 0
"""

    # Create .git/hooks directory if it doesn't exist
    hooks_dir = Path(".git/hooks")
    if not hooks_dir.exists():
        print(f"‚ùå Not a git repository (no .git/hooks directory)")
        return False

    # Check if hook already exists
    hook_path = hooks_dir / "pre-commit"
    if hook_path.exists() and not force:
        print(f"‚ö†Ô∏è  Pre-commit hook already exists. Use --force to overwrite")
        return False

    # Write pre-commit hook
    try:
        hook_path.write_text(hook_content)
        hook_path.chmod(0o755)
        print(f"‚úÖ Pre-commit hook installed at {hook_path}")
        return True
    except Exception as e:
        print(f"‚ùå Failed to install hook: {e}")
        return False


def test_hook():
    """Test the installed hook"""
    hook_path = Path(".git/hooks/pre-commit")

    if not hook_path.exists():
        print("‚ùå Pre-commit hook not found")
        return False

    print("üß™ Testing pre-commit hook...")

    # Make hook executable and run it
    hook_path.chmod(0o755)
    result = os.system(str(hook_path))

    if result == 0:
        print("‚úÖ Hook test passed")
        return True
    else:
        print(f"‚ùå Hook test failed with code {result}")
        return False


def main():
    """Main entry point"""
    import argparse

    parser = argparse.ArgumentParser(
        description="Set up Git hooks for standards enforcement"
    )

    parser.add_argument('--force', action='store_true',
                       help='Overwrite existing hooks')
    parser.add_argument('--test', action='store_true',
                       help='Test hooks after installation')

    args = parser.parse_args()

    # Install hook
    if setup_pre_commit_hook(force=args.force):
        print("‚úÖ Git hooks setup complete")

        # Test if requested
        if args.test:
            test_hook()

        return 0
    else:
        print("‚ùå Git hooks setup failed")
        return 1


if __name__ == "__main__":
    sys.exit(main())
{
  "timestamp": "2025-09-20T20:36:13-04:00",
  "summary": {
    "total_categories": 3,
    "passed_categories": 1,
    "failed_categories": 2
  },
  "details": [
    {
      "category": "unit",
      "passed": false,
      "return_code": 1,
      "output": "F.F.....                                                                 [100%]\n=================================== FAILURES ===================================\n____________________ TestManifestManager.test_manifest_load ____________________\n\nself = <test_common.TestManifestManager object at 0x7308905c0b00>\ntemp_dir = PosixPath('/home/william/git/williamzujkowski.github.io/pytest-of-william/pytest-1/test_manifest_load0')\nmanifest_fixture = {'inventory': {'files': {'file_registry': {}, 'total_count': 0}}, 'repository': {'name': 'test-repo'}, 'version': '4.0.0'}\n\n    def test_manifest_load(self, temp_dir, manifest_fixture):\n        \"\"\"Test loading manifest file\"\"\"\n        manifest_path = temp_dir / \"MANIFEST.json\"\n        manifest_path.write_text(json.dumps(manifest_fixture))\n    \n        with patch('lib.common.Path.cwd') as mock_cwd:\n            mock_cwd.return_value = temp_dir\n            manager = ManifestManager()\n    \n            assert manager.manifest['version'] == \"4.0.0\"\n>           assert manager.manifest['repository']['name'] == \"test-repo\"\nE           AssertionError: assert 'williamzujkowski.github.io' == 'test-repo'\nE             \nE             - test-repo\nE             + williamzujkowski.github.io\n\ntests/unit/test_common.py:28: AssertionError\n____________________ TestManifestManager.test_manifest_save ____________________\n\nself = <test_common.TestManifestManager object at 0x7308905c1250>\ntemp_dir = PosixPath('/home/william/git/williamzujkowski.github.io/pytest-of-william/pytest-1/test_manifest_save0')\nmanifest_fixture = {'inventory': {'files': {'file_registry': {}, 'total_count': 0}}, 'repository': {'name': 'test-repo'}, 'version': '4.0.0'}\n\n    def test_manifest_save(self, temp_dir, manifest_fixture):\n        \"\"\"Test saving manifest with timestamp\"\"\"\n        manifest_path = temp_dir / \"MANIFEST.json\"\n        manifest_path.write_text(json.dumps(manifest_fixture))\n    \n        with patch('lib.common.Path.cwd') as mock_cwd:\n            mock_cwd.return_value = temp_dir\n            manager = ManifestManager()\n    \n            # Save manifest\n>           manager.save_manifest()\nE           AttributeError: 'ManifestManager' object has no attribute 'save_manifest'\n\ntests/unit/test_common.py:53: AttributeError\n========================= memory consumption estimates =========================\nwilliamzujkowski.github.io::tests::unit::test_common.py::TestManifestManager::test_manifest_save  - 404.0 KB\n=========================== short test summary info ============================\nFAILED tests/unit/test_common.py::TestManifestManager::test_manifest_load - A...\nFAILED tests/unit/test_common.py::TestManifestManager::test_manifest_save - A...\n2 failed, 6 passed in 0.45s\n",
      "errors": "/home/william/.pyenv/versions/3.12.3/lib/python3.12/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "summary": "2 failed, 6 passed in 0.45s"
    },
    {
      "category": "integration",
      "passed": false,
      "return_code": 1,
      "output": "...F....                                                                 [100%]\n=================================== FAILURES ===================================\n_____________ TestValidationWorkflow.test_check_duplicates_exists ______________\n\nself = <test_script_workflows.TestValidationWorkflow object at 0x79b7ac7af560>\n\n    def test_check_duplicates_exists(self):\n        \"\"\"Test duplicate checking script exists\"\"\"\n>       assert Path(\"scripts/check_duplicates.py\").exists()\nE       AssertionError: assert False\nE        +  where False = exists()\nE        +    where exists = PosixPath('scripts/check_duplicates.py').exists\nE        +      where PosixPath('scripts/check_duplicates.py') = Path('scripts/check_duplicates.py')\n\ntests/integration/test_script_workflows.py:47: AssertionError\n========================= memory consumption estimates =========================\nwilliamzujkowski.github.io::tests::integration::test_script_workflows.py::TestValidationWorkflow::test_standards_validation  - 37.8 MB\n=========================== short test summary info ============================\nFAILED tests/integration/test_script_workflows.py::TestValidationWorkflow::test_check_duplicates_exists\n1 failed, 7 passed in 0.65s\n",
      "errors": "/home/william/.pyenv/versions/3.12.3/lib/python3.12/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "summary": "1 failed, 7 passed in 0.65s"
    },
    {
      "category": "smoke",
      "passed": true,
      "return_code": 0,
      "output": ".........                                                                [100%]\n=============================== warnings summary ===============================\ntests/smoke/test_build_deploy.py:35\n  /home/william/git/williamzujkowski.github.io/tests/smoke/test_build_deploy.py:35: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\ntests/smoke/test_build_deploy.py:51\n  /home/william/git/williamzujkowski.github.io/tests/smoke/test_build_deploy.py:51: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.slow\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n========================= memory consumption estimates =========================\nwilliamzujkowski.github.io::tests::smoke::test_build_deploy.py::TestBuildSystem::test_npm_build  - 169.4 MB\n9 passed, 2 warnings in 5.60s\n",
      "errors": "/home/william/.pyenv/versions/3.12.3/lib/python3.12/site-packages/pytest_asyncio/plugin.py:208: PytestDeprecationWarning: The configuration option \"asyncio_default_fixture_loop_scope\" is unset.\nThe event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: \"function\", \"class\", \"module\", \"package\", \"session\"\n\n  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))\n",
      "summary": "9 passed, 2 warnings in 5.60s"
    }
  ]
}
[
  {
    "file": "2025-10-06-automated-security-scanning-pipeline.md",
    "title": "Automated Security Scanning Pipeline with Grype and OSV",
    "metrics": {
      "total_lines": 832,
      "code_lines": 599,
      "code_blocks": 19,
      "code_ratio": 72.0,
      "text_lines": 233
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Code Repository\"\n        Git[Git Push]\n        PR[Pull Request]\n    end\n\n    subgraph \"CI/CD Pipeline\"\n        Trigger[GitHub Actions Trigger]\n        Build[Build Stage]\n        Test[Test Stage]\n        Scan[Security Scan Stage]\n    end\n\n    subgraph \"Security Tools\"\n        Grype[Grype<br/>Container Scanning]\n        OSV[OSV-Scanner<br/>Dependency Scanning]\n        Trivy[Trivy<br/>Multi-Scanner]\n    end\n\n    subgraph \"Analysis & Reporting\"\n        SARIF[SARIF Reports]\n        GH[GitHub Security]\n        Slack[Slack Alerts]\n        Wazuh[Wazuh SIEM]\n    end\n\n    subgraph \"Policy Enforcement\"\n        Gates[Quality Gates]\n        Block[Block on Critical]\n        Approve[Manual Review]\n    end\n\n    Git --> Trigger\n    PR --> Trigger\n\n    Trigger --> Build\n    Build --> Test\n    Test --> Scan\n\n    Scan --> Grype\n    Scan --> OSV\n    Scan --> Trivy\n\n    Grype --> SARIF\n    OSV --> SARIF\n    Trivy --> SARIF\n\n    SARIF --> GH\n    SARIF --> Slack\n    SARIF --> Wazuh\n\n    SARIF --> Gates\n    Gates --> Block\n    Gates --> Approve\n\n    style Scan fill:#f44336,color:#fff\n    style Gates fill:#ff9800,color:#fff\n    style Block fill:#d32f2f,color:#fff\n",
          "line_count": 58,
          "start_pos": 610,
          "end_pos": 1803
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 58 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Install Grype\ncurl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin\n\n# Install OSV-Scanner (requires Go 1.21+)\ngo install github.com/google/osv-scanner/cmd/osv-scanner@latest\n\n# Install Trivy\nwget https://github.com/aquasecurity/trivy/releases/download/v0.48.0/trivy_0.48.0_Linux-64bit.deb\nsudo dpkg -i trivy_0.48.0_Linux-64bit.deb\n\n# Verify installations\ngrype version      # Should show v0.74.0 or later\nosv-scanner --version\ntrivy version      # Should show v0.48.0\n",
          "line_count": 14,
          "start_pos": 3128,
          "end_pos": 3660
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .github/workflows/security-scan.yml\nname: Security Scanning Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n  schedule:\n    - cron: '0 2 * * *'  # Daily at 2 AM\n\njobs:\n  dependency-scan:\n    name: Scan Dependencies (OSV)\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run OSV-Scanner\n        uses: google/osv-scanner-action@v1.6.2\n        with:\n          scan-args: |-\n            --lockfile=package-lock.json\n            --lockfile=requirements.txt\n            --format=sarif\n            --output=osv-results.sarif\n        continue-on-error: true\n\n      - name: Upload OSV results to GitHub\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: osv-results.sarif\n          category: osv-scanner\n\n      - name: Check for critical vulnerabilities\n        run: |\n          CRITICAL=$(jq '[.runs[].results[] | select(.level==\"error\")] | length' osv-results.sarif)\n          if [ \"$CRITICAL\" -gt 0 ]; then\n            echo \"\u274c Found $CRITICAL critical vulnerabilities\"\n            exit 1\n          fi\n\n  container-scan:\n    name: Scan Container Images (Grype)\n    runs-on: ubuntu-latest\n    needs: dependency-scan\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Build Docker image\n        run: docker build -t myapp:${{ github.sha }} .\n\n      - name: Run Grype scan\n        uses: anchore/scan-action@v3\n        id: grype\n        with:\n          image: \"myapp:${{ github.sha }}\"\n          fail-build: true\n          severity-cutoff: high\n          output-format: sarif\n\n      - name: Upload Grype results\n        uses: github/codeql-action/upload-sarif@v3\n        if: always()\n        with:\n          sarif_file: ${{ steps.grype.outputs.sarif }}\n          category: grype\n\n  comprehensive-scan:\n    name: Comprehensive Scan (Trivy)\n    runs-on: ubuntu-latest\n    needs: dependency-scan\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: 'fs'\n          scan-ref: '.'\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n          severity: 'CRITICAL,HIGH'\n\n      - name: Upload Trivy results\n        uses: github/codeql-action/upload-sarif@v3\n        if: always()\n        with:\n          sarif_file: 'trivy-results.sarif'\n          category: trivy\n\n  security-gate:\n    name: Security Quality Gate\n    runs-on: ubuntu-latest\n    needs: [dependency-scan, container-scan, comprehensive-scan]\n    if: always()\n\n    steps:\n      - name: Evaluate security posture\n        run: |\n          echo \"All security scans completed\"\n          # Download and analyze all SARIF reports\n          # Make final go/no-go decision\n",
          "line_count": 109,
          "start_pos": 3897,
          "end_pos": 6764
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 109 lines - consider splitting or extracting key parts",
            "priority": "high"
          },
          {
            "type": "reduce",
            "reason": "Has 10 import/setup lines that could be minimized",
            "priority": "low"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Add to security-gate job\n- name: Send Slack notification\n  if: failure()\n  uses: slackapi/slack-github-action@v1.24.0\n  with:\n    payload: |\n      {\n        \"text\": \"\ud83d\udea8 Security scan failed for ${{ github.repository }}\",\n        \"blocks\": [\n          {\n            \"type\": \"section\",\n            \"text\": {\n              \"type\": \"mrkdwn\",\n              \"text\": \"*Security Scan Failed*\\n*Repository:* ${{ github.repository }}\\n*Branch:* ${{ github.ref_name }}\\n*Commit:* ${{ github.sha }}\"\n            }\n          },\n          {\n            \"type\": \"section\",\n            \"text\": {\n              \"type\": \"mrkdwn\",\n              \"text\": \"View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"\n            }\n          }\n        ]\n      }\n  env:\n    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}\n",
          "line_count": 27,
          "start_pos": 6791,
          "end_pos": 7640
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .pre-commit-config.yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: grype-scan\n        name: Grype Security Scan\n        entry: bash -c 'grype dir:. --fail-on high'\n        language: system\n        pass_filenames: false\n\n      - id: osv-scan\n        name: OSV Dependency Scan\n        entry: bash -c 'osv-scanner --lockfile=package-lock.json'\n        language: system\n        pass_filenames: false\n\n      - id: trivy-config-scan\n        name: Trivy Config Scan\n        entry: bash -c 'trivy config .'\n        language: system\n        pass_filenames: false\n",
          "line_count": 21,
          "start_pos": 7944,
          "end_pos": 8514
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "// .vscode/tasks.json\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Security Scan: Grype\",\n      \"type\": \"shell\",\n      \"command\": \"grype dir:. -o json | jq\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    },\n    {\n      \"label\": \"Security Scan: OSV\",\n      \"type\": \"shell\",\n      \"command\": \"osv-scanner --lockfile=package-lock.json --format=json\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"reveal\": \"always\",\n        \"panel\": \"new\"\n      }\n    },\n    {\n      \"label\": \"Security Scan: All\",\n      \"dependsOn\": [\n        \"Security Scan: Grype\",\n        \"Security Scan: OSV\"\n      ],\n      \"group\": {\n        \"kind\": \"test\",\n        \"isDefault\": true\n      }\n    }\n  ]\n}\n",
          "line_count": 37,
          "start_pos": 8987,
          "end_pos": 9758
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 37 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .grype.yaml\n# Exclude false positives\nignore:\n  - vulnerability: CVE-2023-12345\n    reason: \"Not applicable - feature not used\"\n    expiration: 2025-12-31\n\n  - vulnerability: GHSA-xxxx-yyyy-zzzz\n    package:\n      name: \"lodash\"\n      version: \"4.17.20\"\n    reason: \"Testing environment only\"\n\n# Configure severity thresholds\nfail-on-severity: high\n\n# Scope what to scan\nscope: all-layers\n\n# Output formatting\noutput: json\n",
          "line_count": 21,
          "start_pos": 9829,
          "end_pos": 10265
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "toml",
          "code": "# osv-scanner.toml\n[ignore]\n# Ignore specific vulnerabilities\nvulnerabilities = [\n  \"GHSA-xxxx-yyyy-zzzz\"\n]\n\n# Ignore packages in devDependencies\ndev_dependencies = true\n\n# Custom package registries\n[[package_repositories]]\nname = \"private-npm\"\nurl = \"https://npm.internal.company.com\"\n\n[scanning]\n# Skip git directories\nskip_git = true\n\n# Parallel scanning\nmax_depth = 10\nworkers = 4\n",
          "line_count": 22,
          "start_pos": 10298,
          "end_pos": 10694
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .github/workflows/scheduled-scan.yml\nname: Daily Security Scan\n\non:\n  schedule:\n    - cron: '0 6 * * *'  # Daily at 6 AM UTC\n\njobs:\n  scan-production:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        image:\n          - myapp-web:latest\n          - myapp-api:latest\n          - myapp-worker:latest\n\n    steps:\n      - name: Pull production image\n        run: docker pull registry.internal/${{ matrix.image }}\n\n      - name: Scan with Grype\n        run: |\n          grype registry.internal/${{ matrix.image }} \\\n            -o json > grype-${{ matrix.image }}.json\n\n      - name: Scan with Trivy\n        run: |\n          trivy image registry.internal/${{ matrix.image }} \\\n            -f json > trivy-${{ matrix.image }}.json\n\n      - name: Compare with baseline\n        run: |\n          python scripts/compare-scans.py \\\n            --current grype-${{ matrix.image }}.json \\\n            --baseline baseline-${{ matrix.image }}.json \\\n            --alert-on-new\n\n      - name: Upload results to SIEM\n        run: |\n          curl -X POST https://wazuh.internal/api/vulnerabilities \\\n            -H \"Authorization: Bearer ${{ secrets.WAZUH_TOKEN }}\" \\\n            -d @grype-${{ matrix.image }}.json\n",
          "line_count": 44,
          "start_pos": 11489,
          "end_pos": 12714
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 44 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "#!/usr/bin/env python3\n# scripts/compare-scans.py\n\nimport json\nimport sys\nfrom pathlib import Path\n\ndef load_scan(filepath):\n    \"\"\"Load scan results from JSON file\"\"\"\n    with open(filepath) as f:\n        return json.load(f)\n\ndef extract_vulnerabilities(scan_data):\n    \"\"\"Extract vulnerability IDs from scan results\"\"\"\n    vulns = set()\n    for match in scan_data.get('matches', []):\n        vulns.add(match['vulnerability']['id'])\n    return vulns\n\ndef compare_scans(current_file, baseline_file, alert_on_new=False):\n    \"\"\"Compare two scan results\"\"\"\n    current = load_scan(current_file)\n    baseline = load_scan(baseline_file)\n\n    current_vulns = extract_vulnerabilities(current)\n    baseline_vulns = extract_vulnerabilities(baseline)\n\n    new_vulns = current_vulns - baseline_vulns\n    fixed_vulns = baseline_vulns - current_vulns\n\n    print(f\"Scan Comparison Results\")\n    print(f\"=======================\")\n    print(f\"Baseline vulnerabilities: {len(baseline_vulns)}\")\n    print(f\"Current vulnerabilities: {len(current_vulns)}\")\n    print(f\"New vulnerabilities: {len(new_vulns)}\")\n    print(f\"Fixed vulnerabilities: {len(fixed_vulns)}\")\n\n    if new_vulns:\n        print(f\"\\n\u26a0\ufe0f  New vulnerabilities detected:\")\n        for vuln in sorted(new_vulns):\n            print(f\"  - {vuln}\")\n\n        if alert_on_new:\n            sys.exit(1)\n\n    if fixed_vulns:\n        print(f\"\\n\u2705 Vulnerabilities fixed:\")\n        for vuln in sorted(fixed_vulns):\n            print(f\"  - {vuln}\")\n\nif __name__ == '__main__':\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--current', required=True)\n    parser.add_argument('--baseline', required=True)\n    parser.add_argument('--alert-on-new', action='store_true')\n    args = parser.parse_args()\n\n    compare_scans(args.current, args.baseline, args.alert_on_new)\n",
          "line_count": 59,
          "start_pos": 12744,
          "end_pos": 14591
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 12 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 59 lines - consider splitting or extracting key parts",
            "priority": "high"
          },
          {
            "type": "reduce",
            "reason": "Has 6 import/setup lines that could be minimized",
            "priority": "low"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .github/workflows/sbom-scan.yml\nname: SBOM Generation and Scanning\n\non:\n  release:\n    types: [published]\n\njobs:\n  sbom:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Generate SBOM\n        uses: anchore/sbom-action@v0\n        with:\n          format: cyclonedx-json\n          output-file: sbom.cyclonedx.json\n\n      - name: Scan SBOM\n        run: grype sbom:./sbom.cyclonedx.json -o sarif > grype-sbom.sarif\n\n      - name: Upload SBOM to release\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ github.event.release.upload_url }}\n          asset_path: ./sbom.cyclonedx.json\n          asset_name: sbom.cyclonedx.json\n          asset_content_type: application/json\n\n      - name: Store SBOM for future comparison\n        run: |\n          aws s3 cp sbom.cyclonedx.json \\\n            s3://mybucket/sboms/${{ github.repository }}/${{ github.ref_name }}.json\n",
          "line_count": 38,
          "start_pos": 15033,
          "end_pos": 16070
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 38 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# .github/workflows/auto-remediate.yml\nname: Automated Vulnerability Remediation\n\non:\n  schedule:\n    - cron: '0 3 * * 1'  # Weekly on Monday\n\njobs:\n  update-dependencies:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Scan for vulnerabilities\n        id: scan\n        run: |\n          osv-scanner --lockfile=package-lock.json --format=json > vulns.json\n          VULN_COUNT=$(jq '.results[].vulnerabilities | length' vulns.json)\n          echo \"count=$VULN_COUNT\" >> $GITHUB_OUTPUT\n\n      - name: Update dependencies\n        if: steps.scan.outputs.count > 0\n        run: |\n          npm audit fix\n          npm update\n\n      - name: Re-scan\n        run: osv-scanner --lockfile=package-lock.json\n\n      - name: Create pull request\n        if: steps.scan.outputs.count > 0\n        uses: peter-evans/create-pull-request@v5\n        with:\n          commit-message: \"chore: Update dependencies to fix vulnerabilities\"\n          title: \"\ud83d\udd12 Security: Automated dependency updates\"\n          body: |\n            ## Automated Vulnerability Remediation\n\n            This PR updates dependencies to address security vulnerabilities.\n\n            **Vulnerabilities fixed:** ${{ steps.scan.outputs.count }}\n\n            Please review the changes and run tests before merging.\n          branch: auto-remediate/vulnerabilities\n          labels: security,dependencies\n",
          "line_count": 47,
          "start_pos": 16132,
          "end_pos": 17563
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 47 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Automated Security Scanning Pipeline with Grype and OSV - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Automated Security Scanning Pipeline with Grype and OSV - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-09-14-threat-intelligence-mitre-attack-dashboard.md",
    "title": "Building Your Own MITRE ATT&CK Threat Intelligence Dashboard",
    "metrics": {
      "total_lines": 481,
      "code_lines": 327,
      "code_blocks": 9,
      "code_ratio": 68.0,
      "text_lines": 154
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "python",
          "code": "import asyncio\nimport aiohttp\nfrom datetime import datetime, timedelta\nimport json\nfrom collections import defaultdict\n\nclass ThreatIntelligenceDashboard:\n    def __init__(self):\n        self.attack_data = {}\n        self.threat_feeds = []\n        self.actor_profiles = {}\n        self.technique_frequency = defaultdict(int)\n        self.alerts = []\n\n    async def initialize(self):\n        \"\"\"Load MITRE ATT&CK data and configure feeds\"\"\"\n        await self.load_attack_framework()\n        await self.configure_threat_feeds()\n        await self.load_actor_profiles()\n",
          "line_count": 19,
          "start_pos": 2045,
          "end_pos": 2626
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import requests\nfrom stix2 import MemoryStore, Filter\n\nclass ATTACKDataLoader:\n    def __init__(self):\n        self.attack_url = \"[https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json](https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json)\"\n        self.memory_store = None\n\n    def load_attack_data(self):\n        \"\"\"Load MITRE ATT&CK Enterprise matrix\"\"\"\n        response = requests.get(self.attack_url)\n        attack_data = response.json()\n\n        # Create STIX memory store\n        self.memory_store = MemoryStore(stix_data=attack_data[\"objects\"])\n\n        # Extract techniques\n        techniques = self.memory_store.query([\n            Filter(\"type\", \"=\", \"attack-pattern\")\n        ])\n\n        return self.process_techniques(techniques)\n\n    def process_techniques(self, techniques):\n        \"\"\"Process and categorize techniques by tactic\"\"\"\n        technique_map = {}\n\n        for technique in techniques:\n            if hasattr(technique, 'kill_chain_phases'):\n                for phase in technique.kill_chain_phases:\n                    tactic = phase.phase_name.replace('-', ' ').title()\n\n                    if tactic not in technique_map:\n                        technique_map[tactic] = []\n\n                    technique_map[tactic].append({\n                        'id': technique.external_references[0].external_id,\n                        'name': technique.name,\n                        'description': technique.description\n                    })\n\n        return technique_map\n",
          "line_count": 42,
          "start_pos": 2731,
          "end_pos": 4315
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 10 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 42 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import OTXv2\n\nclass AlienVaultCollector:\n    def __init__(self, api_key):\n        self.otx = OTXv2.OTXv2(api_key)\n        self.pulse_cache = {}\n\n    def get_recent_pulses(self, days_back=7):\n        \"\"\"Fetch recent threat pulses\"\"\"\n        pulses = self.otx.getall_iter(\n            modified_since=(datetime.now() - timedelta(days=days_back)\n        )\n\n        attack_mappings = []\n        for pulse in pulses:\n            # Extract ATT&CK tags\n            attack_tags = [tag for tag in pulse.get('tags', [])\n                          if tag.startswith('T')]\n\n            if attack_tags:\n                attack_mappings.append({\n                    'pulse_id': pulse['id'],\n                    'name': pulse['name'],\n                    'techniques': attack_tags,\n                    'indicators': pulse.get('indicators', []),\n                    'adversary': pulse.get('adversary', 'Unknown')\n                })\n\n        return attack_mappings\n",
          "line_count": 29,
          "start_pos": 4599,
          "end_pos": 5557
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "class CISAAlertMapper:\n    def __init__(self):\n        self.cisa_url = \"[https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json](https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json)\"\n        self.attack_mappings = self.load_mappings()\n\n    async def get_cisa_alerts(self):\n        \"\"\"Fetch and map CISA alerts to ATT&CK\"\"\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(self.cisa_url) as response:\n                data = await response.json()\n\n        mapped_alerts = []\n        for vuln in data['vulnerabilities']:\n            # Map vulnerability types to likely ATT&CK techniques\n            techniques = self.map_vuln_to_attack(vuln)\n\n            if techniques:\n                mapped_alerts.append({\n                    'cve': vuln['cveID'],\n                    'techniques': techniques,\n                    'date_added': vuln['dateAdded'],\n                    'ransomware_use': vuln.get('knownRansomwareCampaignUse', False)\n                })\n\n        return mapped_alerts\n\n    def map_vuln_to_attack(self, vuln):\n        \"\"\"Map vulnerability characteristics to ATT&CK techniques\"\"\"\n        techniques = []\n        vuln_type = vuln.get('vulnerabilityName', '').lower()\n\n        # Based on research patterns from CVE->ATT&CK mappings\n        if 'remote code' in vuln_type:\n            techniques.append('T1210')  # Exploitation of Remote Services\n        if 'privilege' in vuln_type:\n            techniques.append('T1068')  # Exploitation for Privilege Escalation\n        if 'sql injection' in vuln_type:\n            techniques.append('T1190')  # Exploit Public-Facing Application\n\n        return techniques\n",
          "line_count": 40,
          "start_pos": 5584,
          "end_pos": 7313
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 40 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nclass ThreatVisualizer:\n    def __init__(self, threat_data):\n        self.threat_data = threat_data\n\n    def create_attack_heatmap(self):\n        \"\"\"Create heatmap of technique frequency\"\"\"\n        tactics = []\n        techniques = []\n        frequencies = []\n\n        for tactic, tech_list in self.threat_data.items():\n            for technique in tech_list:\n                tactics.append(tactic)\n                techniques.append(technique['name'])\n                frequencies.append(technique.get('frequency', 0)\n\n        fig = go.Figure(data=go.Heatmap(\n            x=tactics,\n            y=techniques,\n            z=frequencies,\n            colorscale='Reds',\n            showscale=True\n        )\n\n        fig.update_layout(\n            title='MITRE ATT&CK Technique Frequency',\n            xaxis_title='Tactics',\n            yaxis_title='Techniques',\n            height=800\n        )\n\n        return fig\n\n    def create_threat_timeline(self, alerts):\n        \"\"\"Create timeline of threat activity\"\"\"\n        fig = go.Figure()\n\n        for alert in alerts:\n            fig.add_trace(go.Scatter(\n                x=[alert['timestamp']],\n                y=[alert['severity']],\n                mode='markers+text',\n                name=alert['source'],\n                text=alert['description'],\n                marker=dict(\n                    size=alert['severity'] * 5,\n                    color=self.get_color_by_severity(alert['severity'])\n                )\n            )\n\n        fig.update_layout(\n            title='Threat Activity Timeline',\n            xaxis_title='Time',\n            yaxis_title='Severity',\n            showlegend=True\n        )\n\n        return fig\n",
          "line_count": 61,
          "start_pos": 7533,
          "end_pos": 9302
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 10 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 61 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "class ThreatActorProfiler:\n    def __init__(self):\n        self.actor_database = {}\n        self.load_actor_profiles()\n\n    def load_actor_profiles(self):\n        \"\"\"Load known threat actor profiles from MITRE\"\"\"\n        # In production, this would fetch from MITRE's groups STIX data\n        self.actor_database = {\n            'APT29': {\n                'aliases': ['Cozy Bear', 'The Dukes'],\n                'techniques': ['T1566', 'T1027', 'T1055', 'T1083'],\n                'targets': ['Government', 'Healthcare'],\n                'origin': 'Russia'\n            },\n            'APT28': {\n                'aliases': ['Fancy Bear', 'Sofacy'],\n                'techniques': ['T1566', 'T1193', 'T1071', 'T1056'],\n                'targets': ['Government', 'Defense'],\n                'origin': 'Russia'\n            }\n        }\n\n    def match_activity_to_actor(self, observed_techniques):\n        \"\"\"Match observed techniques to known actors\"\"\"\n        matches = []\n\n        for actor, profile in self.actor_database.items():\n            overlap = set(observed_techniques) & set(profile['techniques'])\n\n            if len(overlap) >= 2:  # Minimum 2 technique matches\n                confidence = len(overlap) / len(profile['techniques'])\n                matches.append({\n                    'actor': actor,\n                    'confidence': confidence,\n                    'matched_techniques': list(overlap)\n                })\n\n        return sorted(matches, key=lambda x: x['confidence'], reverse=True)\n",
          "line_count": 39,
          "start_pos": 9536,
          "end_pos": 11054
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 39 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\nclass ThreatAlerting:\n    def __init__(self, config):\n        self.smtp_server = config['smtp_server']\n        self.smtp_port = config['smtp_port']\n        self.sender = config['sender_email']\n        self.recipients = config['recipients']\n        self.priority_techniques = config['priority_techniques']\n\n    def check_alerts(self, new_threats):\n        \"\"\"Check for high-priority threats\"\"\"\n        alerts = []\n\n        for threat in new_threats:\n            # Check against priority techniques\n            if any(tech in self.priority_techniques\n                   for tech in threat.get('techniques', []):\n                alerts.append(self.create_alert(threat)\n\n            # Check for ransomware indicators\n            if threat.get('ransomware_use'):\n                alerts.append(self.create_critical_alert(threat)\n\n        return alerts\n\n    def create_alert(self, threat):\n        \"\"\"Create standard alert\"\"\"\n        return {\n            'level': 'WARNING',\n            'timestamp': datetime.now(),\n            'threat': threat,\n            'message': f\"Detected activity matching technique {threat['techniques']}\"\n        }\n\n    def send_alert_email(self, alert):\n        \"\"\"Send email notification for critical alerts\"\"\"\n        msg = MIMEMultipart('alternative')\n        msg['Subject'] = f\"[{alert['level']}] Threat Intelligence Alert\"\n        msg['From'] = self.sender\n        msg['To'] = ', '.join(self.recipients)\n\n        html_body = self.format_alert_html(alert)\n        msg.attach(MIMEText(html_body, 'html')\n\n        with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n            server.starttls()\n            server.send_message(msg)\n",
          "line_count": 50,
          "start_pos": 11298,
          "end_pos": 13078
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 9 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 50 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "class MITREDashboard:\n    def __init__(self):\n        self.attack_loader = ATTACKDataLoader()\n        self.threat_feeds = []\n        self.visualizer = None\n        self.alerting = None\n\n    async def run(self):\n        \"\"\"Main dashboard loop\"\"\"\n        # Initialize components\n        attack_data = self.attack_loader.load_attack_data()\n        self.visualizer = ThreatVisualizer(attack_data)\n\n        while True:\n            try:\n                # Collect threat intelligence\n                threats = await self.collect_all_threats()\n\n                # Map to ATT&CK\n                mapped_threats = self.map_threats_to_attack(threats)\n\n                # Update visualizations\n                self.update_dashboard(mapped_threats)\n\n                # Check for alerts\n                alerts = self.check_alert_conditions(mapped_threats)\n                if alerts:\n                    await self.process_alerts(alerts)\n\n                # Wait before next update\n                await asyncio.sleep(3600)  # Update hourly\n\n            except Exception as e:\n                print(f\"Dashboard error: {e}\")\n                await asyncio.sleep(300)  # Retry in 5 minutes\n",
          "line_count": 35,
          "start_pos": 13155,
          "end_pos": 14335
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 35 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Building Your Own MITRE ATT&CK Threat Intelligence Dashboard - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Building Your Own MITRE ATT&CK Threat Intelligence Dashboard - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Building Your Own MITRE ATT&CK Threat Intelligence Dashboard - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "sequence",
        "title": "Building Your Own MITRE ATT&CK Threat Intelligence Dashboard - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-09-08-zero-trust-vlan-segmentation-homelab.md",
    "title": "Implementing Zero Trust Microsegmentation with VLANs",
    "metrics": {
      "total_lines": 664,
      "code_lines": 430,
      "code_blocks": 20,
      "code_ratio": 64.8,
      "text_lines": 234
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Internet Edge\"\n        WAN[WAN Connection]\n        UDM[Dream Machine Pro]\n    end\n\n    subgraph \"Management VLAN 10\"\n        Admin[Admin Devices]\n        Proxmox[Proxmox Host]\n        Switches[Network Switches]\n    end\n\n    subgraph \"Trusted VLAN 20\"\n        Workstation[Workstations]\n        Laptops[Laptops]\n        Phones[Personal Phones]\n    end\n\n    subgraph \"Server VLAN 30\"\n        Web[Web Servers]\n        DB[Databases]\n        Apps[Applications]\n    end\n\n    subgraph \"IoT VLAN 40\"\n        Camera[IP Cameras]\n        Smart[Smart Devices]\n        Sensors[IoT Sensors]\n    end\n\n    subgraph \"Guest VLAN 50\"\n        GuestDevices[Guest Devices]\n    end\n\n    subgraph \"Security Services\"\n        Firewall[Firewall Rules]\n        IDS[Suricata IDS]\n        DNS[Pi-hole DNS]\n    end\n\n    WAN --> UDM\n    UDM --> Firewall\n\n    Firewall --> Admin\n    Firewall --> Workstation\n    Firewall --> Web\n    Firewall --> Camera\n    Firewall --> GuestDevices\n\n    Firewall --> IDS\n    Firewall --> DNS\n\n    style Firewall fill:#f44336,color:#fff\n    style IoT fill:#ff9800,color:#fff\n    style Guest fill:#ff5722,color:#fff\n",
          "line_count": 55,
          "start_pos": 537,
          "end_pos": 1689
        },
        "suggestions": [
          {
            "type": "split",
            "reason": "Code block has 55 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# SSH into UDM Pro\nssh admin@10.0.0.1\n\n# Enable advanced features\nset system advanced enable\n\n# Configure VLANs\nconfigure\nset interfaces ethernet eth1 vif 10 description \"Management\"\nset interfaces ethernet eth1 vif 10 address 10.0.10.1/24\nset interfaces ethernet eth1 vif 20 description \"Trusted\"\nset interfaces ethernet eth1 vif 20 address 10.0.20.1/24\nset interfaces ethernet eth1 vif 30 description \"Servers\"\nset interfaces ethernet eth1 vif 30 address 10.0.30.1/24\nset interfaces ethernet eth1 vif 40 description \"IoT\"\nset interfaces ethernet eth1 vif 40 address 10.0.40.1/24\nset interfaces ethernet eth1 vif 50 description \"Guest\"\nset interfaces ethernet eth1 vif 50 address 10.0.50.1/24\ncommit\nsave\n",
          "line_count": 20,
          "start_pos": 2879,
          "end_pos": 3596
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"vlans\": [\n    {\n      \"id\": 10,\n      \"name\": \"Management\",\n      \"subnet\": \"10.0.10.0/24\",\n      \"dhcp\": {\n        \"enabled\": true,\n        \"start\": \"10.0.10.100\",\n        \"end\": \"10.0.10.200\",\n        \"lease_time\": 86400,\n        \"dns\": [\"10.0.10.5\"],\n        \"gateway\": \"10.0.10.1\"\n      }\n    },\n    {\n      \"id\": 40,\n      \"name\": \"IoT\",\n      \"subnet\": \"10.0.40.0/24\",\n      \"dhcp\": {\n        \"enabled\": true,\n        \"start\": \"10.0.40.100\",\n        \"end\": \"10.0.40.250\",\n        \"lease_time\": 86400,\n        \"dns\": [\"10.0.10.5\"],\n        \"gateway\": \"10.0.40.1\"\n      }\n    }\n  ]\n}\n",
          "line_count": 30,
          "start_pos": 3622,
          "end_pos": 4226
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"rules\": [\n    {\n      \"name\": \"Allow Management to All\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.10.0/24\",\n      \"destination\": \"any\",\n      \"protocol\": \"all\",\n      \"logging\": true\n    },\n    {\n      \"name\": \"Allow SSH to Management\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.20.0/24\",\n      \"destination\": \"10.0.10.0/24\",\n      \"protocol\": \"tcp\",\n      \"port\": 22,\n      \"logging\": true\n    }\n  ]\n}\n",
          "line_count": 21,
          "start_pos": 4461,
          "end_pos": 4893
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"rules\": [\n    {\n      \"name\": \"Block IoT to Management\",\n      \"action\": \"drop\",\n      \"source\": \"10.0.40.0/24\",\n      \"destination\": \"10.0.10.0/24\",\n      \"protocol\": \"all\",\n      \"logging\": true\n    },\n    {\n      \"name\": \"Block IoT to Trusted\",\n      \"action\": \"drop\",\n      \"source\": \"10.0.40.0/24\",\n      \"destination\": \"10.0.20.0/24\",\n      \"protocol\": \"all\",\n      \"logging\": true\n    },\n    {\n      \"name\": \"Allow IoT to Internet HTTP/HTTPS\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.40.0/24\",\n      \"destination\": \"any\",\n      \"protocol\": \"tcp\",\n      \"port\": \"80,443\",\n      \"logging\": false\n    },\n    {\n      \"name\": \"Allow Trusted to IoT HTTP\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.20.0/24\",\n      \"destination\": \"10.0.40.0/24\",\n      \"protocol\": \"tcp\",\n      \"port\": \"80,443,554,8080\",\n      \"logging\": true\n    },\n    {\n      \"name\": \"Allow IoT DNS\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.40.0/24\",\n      \"destination\": \"10.0.10.5\",\n      \"protocol\": \"udp\",\n      \"port\": 53\n    },\n    {\n      \"name\": \"Block All Other IoT Traffic\",\n      \"action\": \"drop\",\n      \"source\": \"10.0.40.0/24\",\n      \"destination\": \"any\",\n      \"protocol\": \"all\",\n      \"logging\": true\n    }\n  ]\n}\n",
          "line_count": 54,
          "start_pos": 4934,
          "end_pos": 6169
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 54 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"rules\": [\n    {\n      \"name\": \"Allow Trusted to Servers HTTPS\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.20.0/24\",\n      \"destination\": \"10.0.30.0/24\",\n      \"protocol\": \"tcp\",\n      \"port\": \"443,8443\",\n      \"logging\": false\n    },\n    {\n      \"name\": \"Allow Servers to Internet Updates\",\n      \"action\": \"accept\",\n      \"source\": \"10.0.30.0/24\",\n      \"destination\": \"any\",\n      \"protocol\": \"tcp\",\n      \"port\": \"80,443\",\n      \"logging\": true\n    },\n    {\n      \"name\": \"Block Servers to Management\",\n      \"action\": \"drop\",\n      \"source\": \"10.0.30.0/24\",\n      \"destination\": \"10.0.10.0/24\",\n      \"protocol\": \"all\",\n      \"logging\": true\n    }\n  ]\n}\n",
          "line_count": 30,
          "start_pos": 6194,
          "end_pos": 6874
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "#!/usr/bin/env python3\n# /usr/local/bin/vlan-traffic-monitor.py\n\nimport subprocess\nimport json\nfrom datetime import datetime\n\ndef analyze_cross_vlan_traffic():\n    \"\"\"Detect unexpected cross-VLAN traffic\"\"\"\n\n    # Expected patterns (whitelist)\n    allowed_flows = {\n        ('10.0.20.0/24', '10.0.30.0/24', 443),  # Trusted to Servers HTTPS\n        ('10.0.20.0/24', '10.0.40.0/24', 80),   # Trusted to IoT HTTP\n    }\n\n    # Parse firewall logs\n    with open('/var/log/firewall.log') as f:\n        for line in f:\n            if 'ACCEPT' not in line:\n                continue\n\n            # Extract source, destination, port\n            parts = line.split()\n            src = parts[5]\n            dst = parts[7]\n            port = int(parts[9])\n\n            # Check if flow is allowed\n            flow = (src, dst, port)\n            if flow not in allowed_flows:\n                alert(f\"Unexpected traffic: {src} -> {dst}:{port}\")\n\ndef alert(message):\n    \"\"\"Send alert via multiple channels\"\"\"\n    print(f\"[ALERT] {message}\")\n\n    # Log to syslog\n    subprocess.run(['logger', '-t', 'vlan-monitor', message])\n\n    # Send to monitoring system\n    # subprocess.run(['curl', '-X', 'POST', 'http://monitoring/api/alert',\n    #                 '-d', json.dumps({'message': message})])\n\nif __name__ == '__main__':\n    analyze_cross_vlan_traffic()\n",
          "line_count": 46,
          "start_pos": 9746,
          "end_pos": 11099
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 10 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 46 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/test-vlan-segmentation.sh\n\n# Test connectivity between VLANs\ndeclare -A vlans=(\n    [mgmt]=\"10.0.10.100\"\n    [trusted]=\"10.0.20.100\"\n    [servers]=\"10.0.30.100\"\n    [iot]=\"10.0.40.100\"\n    [guest]=\"10.0.50.100\"\n)\n\necho \"VLAN Segmentation Test Results\"\necho \"==============================\"\necho \"\"\n\nfor src_vlan in \"${!vlans[@]}\"; do\n    src_ip=\"${vlans[$src_vlan]}\"\n\n    for dst_vlan in \"${!vlans[@]}\"; do\n        dst_ip=\"${vlans[$dst_vlan]}\"\n\n        if [ \"$src_vlan\" == \"$dst_vlan\" ]; then\n            continue\n        fi\n\n        # Test ICMP\n        if timeout 2 ping -c 1 -I \"$src_ip\" \"$dst_ip\" &>/dev/null; then\n            echo \"\u2705 $src_vlan -> $dst_vlan: ICMP allowed\"\n        else\n            echo \"\u274c $src_vlan -> $dst_vlan: ICMP blocked\"\n        fi\n\n        # Test TCP 443\n        if timeout 2 nc -z -w 1 -s \"$src_ip\" \"$dst_ip\" 443 &>/dev/null; then\n            echo \"\u2705 $src_vlan -> $dst_vlan: TCP 443 allowed\"\n        else\n            echo \"\u274c $src_vlan -> $dst_vlan: TCP 443 blocked\"\n        fi\n    done\n    echo \"\"\ndone\n",
          "line_count": 42,
          "start_pos": 11161,
          "end_pos": 12232
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 42 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/test-vlan-breakout.sh\n\n# Simulate attacker on IoT VLAN trying to break out\nIOT_IP=\"10.0.40.50\"\nTARGET_IPS=(\"10.0.10.100\" \"10.0.20.100\" \"10.0.30.100\")\n\necho \"Testing VLAN Breakout Prevention\"\necho \"================================\"\necho \"Simulating attacker at $IOT_IP\"\necho \"\"\n\nfor target in \"${TARGET_IPS[@]}\"; do\n    echo \"Attempting to reach $target...\"\n\n    # Port scanning\n    nmap -Pn -p 22,80,443,3389,445 --source-ip \"$IOT_IP\" \"$target\" -oN \"/tmp/vlan-test-$target.txt\"\n\n    # Service enumeration\n    if grep -q \"open\" \"/tmp/vlan-test-$target.txt\"; then\n        echo \"\u26a0\ufe0f  WARNING: Open ports found on $target from IoT VLAN!\"\n        cat \"/tmp/vlan-test-$target.txt\"\n    else\n        echo \"\u2705 $target properly isolated from IoT VLAN\"\n    fi\n    echo \"\"\ndone\n",
          "line_count": 27,
          "start_pos": 12269,
          "end_pos": 13073
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Implementing Zero Trust Microsegmentation with VLANs - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Implementing Zero Trust Microsegmentation with VLANs - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Implementing Zero Trust Microsegmentation with VLANs - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-09-29-proxmox-high-availability-homelab.md",
    "title": "Proxmox High Availability Setup for Homelab Reliability",
    "metrics": {
      "total_lines": 718,
      "code_lines": 446,
      "code_blocks": 23,
      "code_ratio": 62.1,
      "text_lines": 272
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Cluster Nodes\"\n        Node1[Proxmox Node 1<br/>Dell R940]\n        Node2[Proxmox Node 2<br/>Dell R730]\n        Node3[Proxmox Node 3<br/>Custom Build]\n    end\n\n    subgraph \"Shared Storage\"\n        Ceph[(Ceph Cluster<br/>Distributed Storage)]\n    end\n\n    subgraph \"Network Infrastructure\"\n        Switch1[10Gb Switch<br/>Primary]\n        Switch2[1Gb Switch<br/>Management]\n    end\n\n    subgraph \"HA Services\"\n        Corosync[Corosync<br/>Cluster Communication]\n        PVE[PVE HA Manager<br/>Failover Orchestration]\n        Fencing[Fencing Agent<br/>Split-Brain Prevention]\n    end\n\n    subgraph \"VMs with HA\"\n        DNS[Pi-hole DNS]\n        Vault[Bitwarden]\n        Monitor[Wazuh SIEM]\n        Web[Web Services]\n    end\n\n    Node1 --> Ceph\n    Node2 --> Ceph\n    Node3 --> Ceph\n\n    Node1 --> Switch1\n    Node2 --> Switch1\n    Node3 --> Switch1\n\n    Node1 --> Switch2\n    Node2 --> Switch2\n    Node3 --> Switch2\n\n    Corosync --> Node1\n    Corosync --> Node2\n    Corosync --> Node3\n\n    PVE --> Corosync\n    Fencing --> PVE\n\n    Ceph --> DNS\n    Ceph --> Vault\n    Ceph --> Monitor\n    Ceph --> Web\n\n    style Ceph fill:#4caf50,color:#fff\n    style Corosync fill:#2196f3,color:#fff\n    style Fencing fill:#f44336,color:#fff\n",
          "line_count": 56,
          "start_pos": 553,
          "end_pos": 1817
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 56 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# On each node: Update and prepare\napt update && apt full-upgrade -y\napt install -y bridge-utils ifupdown2\n\n# Disable enterprise repository (for homelab)\nrm /etc/apt/sources.list.d/pve-enterprise.list\n\n# Add no-subscription repository\necho \"deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription\" > \\\n    /etc/apt/sources.list.d/pve-no-subscription.list\n\napt update\n\n# Configure static IP addresses\ncat >> /etc/network/interfaces <<EOF\nauto vmbr0\niface vmbr0 inet static\n    address 10.0.10.11/24\n    gateway 10.0.10.1\n    bridge-ports eno1\n    bridge-stp off\n    bridge-fd 0\n\nauto vmbr1\niface vmbr1 inet static\n    address 10.0.100.11/24\n    bridge-ports eno2\n    bridge-stp off\n    bridge-fd 0\n    # Ceph storage network\nEOF\n\nsystemctl restart networking\n",
          "line_count": 33,
          "start_pos": 2799,
          "end_pos": 3584
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 6 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 33 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Edit /etc/pve/corosync.conf on any node\ntotem {\n    version: 2\n    cluster_name: homelab-cluster\n    config_version: 3\n    transport: knet\n    crypto_cipher: aes256\n    crypto_hash: sha256\n}\n\nnodelist {\n    node {\n        name: pve1\n        nodeid: 1\n        quorum_votes: 1\n        ring0_addr: 10.0.10.11\n        ring1_addr: 10.0.100.11\n    }\n    node {\n        name: pve2\n        nodeid: 2\n        quorum_votes: 1\n        ring0_addr: 10.0.10.12\n        ring1_addr: 10.0.100.12\n    }\n    node {\n        name: pve3\n        nodeid: 3\n        quorum_votes: 1\n        ring0_addr: 10.0.10.13\n        ring1_addr: 10.0.100.13\n    }\n}\n\nquorum {\n    provider: corosync_votequorum\n}\n\n# Apply changes\nsystemctl restart pve-cluster corosync\n",
          "line_count": 40,
          "start_pos": 3971,
          "end_pos": 4714
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 6 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 40 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Install fence agents\napt install -y fence-agents-all\n\n# Configure IPMI-based fencing for each node\nha-manager add fence-pve1 --type=ipmilan \\\n    --ip=10.0.10.21 \\\n    --username=admin \\\n    --password=secure-password \\\n    --lanplus=1\n\nha-manager add fence-pve2 --type=ipmilan \\\n    --ip=10.0.10.22 \\\n    --username=admin \\\n    --password=secure-password \\\n    --lanplus=1\n\nha-manager add fence-pve3 --type=ipmilan \\\n    --ip=10.0.10.23 \\\n    --username=admin \\\n    --password=secure-password \\\n    --lanplus=1\n\n# Test fencing\nfence_ipmilan -a 10.0.10.21 -l admin -p secure-password -o status\n",
          "line_count": 24,
          "start_pos": 6454,
          "end_pos": 7061
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Test 2: Network isolation\nssh pve2 \"iptables -A INPUT -j DROP; iptables -A OUTPUT -j DROP\"\n\n# Watch cluster response\npvecm status\n\n# Expected: Fencing agent powers off pve2 to prevent split-brain\n# VMs migrate to surviving nodes\n\n# Restore network\nssh pve2 \"iptables -F\"\nsystemctl restart corosync pve-cluster\n",
          "line_count": 12,
          "start_pos": 7825,
          "end_pos": 8148
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/cluster-backup.sh\n\nBACKUP_DIR=\"/mnt/backup/proxmox\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup cluster configuration\ntar -czf \"$BACKUP_DIR/cluster-config_$DATE.tar.gz\" \\\n    /etc/pve \\\n    /etc/corosync \\\n    /etc/ceph\n\n# Backup Ceph configuration\nceph config dump > \"$BACKUP_DIR/ceph-config_$DATE.txt\"\nceph osd tree > \"$BACKUP_DIR/ceph-osd-tree_$DATE.txt\"\n\n# Test backups\nvzdump-backup-test \"$BACKUP_DIR\"/*.tar.gz\n\n# Sync to offsite location\nrclone sync \"$BACKUP_DIR\" remote:proxmox-backups/\n\n# Retention: Keep 7 days local, 30 days offsite\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +7 -delete\n",
          "line_count": 24,
          "start_pos": 8958,
          "end_pos": 9589
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 6 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"dashboard\": {\n    \"title\": \"Proxmox HA Cluster\",\n    \"panels\": [\n      {\n        \"title\": \"Cluster Quorum Status\",\n        \"targets\": [\n          {\n            \"expr\": \"pve_cluster_quorum\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Node Status\",\n        \"targets\": [\n          {\n            \"expr\": \"pve_node_info\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Ceph Health\",\n        \"targets\": [\n          {\n            \"expr\": \"ceph_health_status\"\n          }\n        ]\n      },\n      {\n        \"title\": \"VM Migration Events\",\n        \"targets\": [\n          {\n            \"expr\": \"rate(pve_vm_migrate_total[5m])\"\n          }\n        ]\n      }\n    ]\n  }\n}\n",
          "line_count": 39,
          "start_pos": 9928,
          "end_pos": 10625
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 39 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# /etc/prometheus/alerts/proxmox.yml\ngroups:\n  - name: proxmox_ha\n    rules:\n      - alert: ClusterQuorumLost\n        expr: pve_cluster_quorum == 0\n        for: 1m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Proxmox cluster lost quorum\"\n\n      - alert: NodeDown\n        expr: up{job=\"proxmox\"} == 0\n        for: 2m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Proxmox node {{ $labels.instance }} is down\"\n\n      - alert: CephHealthError\n        expr: ceph_health_status != 0\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Ceph cluster health degraded\"\n\n      - alert: HAMigrationFailed\n        expr: increase(pve_vm_migrate_failed_total[10m]) > 0\n        labels:\n          severity: critical\n        annotations:\n          summary: \"HA migration failed for VM {{ $labels.vmid }}\"\n",
          "line_count": 34,
          "start_pos": 10647,
          "end_pos": 11574
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 34 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/rolling-update.sh\n\nNODES=(\"pve1\" \"pve2\" \"pve3\")\n\nfor node in \"${NODES[@]}\"; do\n    echo \"Updating $node...\"\n\n    # Migrate VMs\n    ssh $node \"ha-manager migrate-all pve2\"\n\n    # Wait for migrations\n    sleep 60\n\n    # Update and reboot\n    ssh $node \"apt update && apt full-upgrade -y && reboot\"\n\n    # Wait for node to come back\n    while ! ssh $node \"uptime\"; do\n        sleep 30\n    done\n\n    echo \"$node updated successfully\"\n    sleep 60\ndone\n",
          "line_count": 25,
          "start_pos": 12007,
          "end_pos": 12495
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Proxmox High Availability Setup for Homelab Reliability - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "network",
        "title": "Proxmox High Availability Setup for Homelab Reliability - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Proxmox High Availability Setup for Homelab Reliability - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-07-01-ebpf-security-monitoring-practical-guide.md",
    "title": "eBPF for Security Monitoring: A Practical Guide",
    "metrics": {
      "total_lines": 442,
      "code_lines": 261,
      "code_blocks": 10,
      "code_ratio": 59.0,
      "text_lines": 181
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Attack Surface\"\n        A1[Process Execution]\n        A2[Network Connections]\n        A3[File Operations]\n        A4[Privilege Changes]\n    end\n    \n    subgraph \"Kernel Space\"\n        KP[Kernel Probes]\n        BPF[eBPF VM]\n        Maps[(BPF Maps)]\n        Verifier[BPF Verifier]\n    end\n    \n    subgraph \"User Space\"\n        Loader[BPF Loader]\n        Monitor[Event Monitor]\n        AI[AI/ML Analysis]\n        SIEM[SIEM Integration]\n    end\n    \n    A1 --> KP\n    A2 --> KP\n    A3 --> KP\n    A4 --> KP\n    \n    KP --> Verifier\n    Verifier -->|Safe| BPF\n    BPF --> Maps\n    \n    Loader -->|Load Program| Verifier\n    Maps -->|Poll Events| Monitor\n    Monitor --> AI\n    AI --> SIEM\n    \n    style BPF fill:#ff9800\n    style AI fill:#9c27b0\n    style SIEM fill:#4caf50\n",
          "line_count": 39,
          "start_pos": 1097,
          "end_pos": 1905
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 39 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Traditional Monitoring\"\n        T1[Application Logs]\n        T2[System Logs]\n        T3[Network Logs]\n        T4[SIEM Aggregation]\n        T5[Alert Generation]\n        \n        T1 -->|Delayed| T4\n        T2 -->|Can be tampered| T4\n        T3 -->|After the fact| T4\n        T4 -->|Minutes to hours| T5\n    end\n    \n    subgraph \"eBPF Monitoring\"\n        E1[Kernel Events]\n        E2[Real-time Processing]\n        E3[In-kernel Filtering]\n        E4[Instant Detection]\n        \n        E1 -->|Nanoseconds| E2\n        E2 -->|Microseconds| E3\n        E3 -->|Milliseconds| E4\n    end\n    \n    style T5 fill:#f44336\n    style E4 fill:#4caf50\n",
          "line_count": 27,
          "start_pos": 2382,
          "end_pos": 3054
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "# Core detection logic (simplified)\ndef detect_privilege_escalation(event):\n    if event.new_uid == 0 and event.old_uid != 0:\n        if event.parent_process in ['bash', 'python', 'perl']:\n            return \"HIGH\", \"Suspicious privilege escalation\"\n    return None\n",
          "line_count": 6,
          "start_pos": 3221,
          "end_pos": 3500
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "sequenceDiagram\n    participant Process\n    participant Kernel\n    participant eBPF\n    participant Detector\n    participant Response\n    \n    Process->>Kernel: setuid(0)\n    Kernel->>eBPF: Syscall Hook\n    eBPF->>eBPF: Check UID transition\n    alt Suspicious Pattern\n        eBPF->>Detector: Alert Event\n        Detector->>Response: Trigger Response\n        Response-->>Process: Block/Kill/Isolate\n    else Normal Behavior\n        eBPF->>eBPF: Log and Continue\n    end\n",
          "line_count": 17,
          "start_pos": 3745,
          "end_pos": 4229
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph TD\n    subgraph \"Detection Layers\"\n        L1[File System Monitoring]\n        L2[Process Behavior Analysis]\n        L3[Network Communication]\n        L4[Ransom Note Detection]\n    end\n    \n    subgraph \"eBPF Probes\"\n        P1[VFS Operations]\n        P2[Process Creation]\n        P3[TCP Connections]\n        P4[File Writes]\n    end\n    \n    subgraph \"AI/ML Pipeline\"\n        ML1[Feature Extraction]\n        ML2[Behavior Classification]\n        ML3[NLP Analysis]\n        ML4[Threat Scoring]\n    end\n    \n    P1 --> L1 --> ML1\n    P2 --> L2 --> ML1\n    P3 --> L3 --> ML1\n    P4 --> L4 --> ML3\n    \n    ML1 --> ML2\n    ML3 --> ML2\n    ML2 --> ML4\n    \n    ML4 -->|Score > Threshold| Alert[Generate Alert]\n    \n    style ML2 fill:#9c27b0\n    style Alert fill:#f44336\n",
          "line_count": 35,
          "start_pos": 4411,
          "end_pos": 5194
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 35 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Container\"\n        C1[Process]\n        C2[Namespace]\n        C3[Cgroups]\n    end\n    \n    subgraph \"Detection Points\"\n        D1[Namespace Changes]\n        D2[Capability Escalation]\n        D3[Syscall Anomalies]\n        D4[Device Access]\n    end\n    \n    subgraph \"eBPF Monitors\"\n        M1[setns monitoring]\n        M2[CAP_SYS_ADMIN checks]\n        M3[Syscall filtering]\n        M4[Device operation tracking]\n    end\n    \n    C1 --> D1 --> M1\n    C1 --> D2 --> M2\n    C2 --> D3 --> M3\n    C3 --> D4 --> M4\n    \n    M1 & M2 & M3 & M4 --> Detection[Container Escape Detection]\n    \n    style Detection fill:#ff5722\n",
          "line_count": 29,
          "start_pos": 5357,
          "end_pos": 6008
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Phase 1: Development\"\n        Dev1[Write eBPF Programs]\n        Dev2[Test in VM]\n        Dev3[Verify Performance]\n    end\n    \n    subgraph \"Phase 2: Staging\"\n        Stage1[Deploy to Staging]\n        Stage2[Monitor False Positives]\n        Stage3[Tune Detection Rules]\n    end\n    \n    subgraph \"Phase 3: Production\"\n        Prod1[Gradual Rollout]\n        Prod2[Performance Monitoring]\n        Prod3[Continuous Tuning]\n    end\n    \n    Dev3 --> Stage1\n    Stage3 --> Prod1\n    \n    Prod3 -->|Feedback| Dev1\n",
          "line_count": 23,
          "start_pos": 6152,
          "end_pos": 6697
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Data Sources\"\n        eBPF[eBPF Events]\n        Logs[Traditional Logs]\n        Network[Network Traffic]\n        Cloud[Cloud APIs]\n    end\n    \n    subgraph \"Processing Layer\"\n        Stream[Stream Processing]\n        Enrich[Enrichment]\n        Correlate[Correlation Engine]\n    end\n    \n    subgraph \"Intelligence Layer\"\n        ML[Machine Learning]\n        Threat[Threat Intel]\n        Rules[Detection Rules]\n    end\n    \n    subgraph \"Response Layer\"\n        Alert[Alerting]\n        Auto[Automation]\n        Investigate[Investigation]\n    end\n    \n    eBPF --> Stream\n    Logs --> Stream\n    Network --> Stream\n    Cloud --> Stream\n    \n    Stream --> Enrich\n    Enrich --> Correlate\n    \n    Correlate --> ML\n    Correlate --> Threat\n    Correlate --> Rules\n    \n    ML & Threat & Rules --> Alert\n    Alert --> Auto\n    Alert --> Investigate\n    \n    style eBPF fill:#ff9800\n    style ML fill:#9c27b0\n",
          "line_count": 44,
          "start_pos": 7924,
          "end_pos": 8865
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 44 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "timeline\n    title eBPF Security Evolution\n    \n    2024 : Basic Detection\n         : System Call Monitoring\n         : Network Filtering\n    \n    2025 : AI Integration\n         : Behavioral Analysis\n         : Cross-platform Support\n    \n    2026 : Hardware Acceleration\n         : SmartNIC Offload\n         : Distributed Correlation\n    \n    2027 : Autonomous Response\n         : Self-healing Systems\n         : Predictive Security\n",
          "line_count": 18,
          "start_pos": 9847,
          "end_pos": 10295
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "eBPF for Security Monitoring: A Practical Guide - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "eBPF for Security Monitoring: A Practical Guide - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "eBPF for Security Monitoring: A Practical Guide - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "eBPF for Security Monitoring: A Practical Guide - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "eBPF for Security Monitoring: A Practical Guide - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-08-25-network-traffic-analysis-suricata-homelab.md",
    "title": "Building a Network Traffic Analysis Lab with Suricata",
    "metrics": {
      "total_lines": 591,
      "code_lines": 343,
      "code_blocks": 25,
      "code_ratio": 58.0,
      "text_lines": 248
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Traffic Collection\"\n        Mirror[Port Mirroring]\n        Tap[Network TAP]\n        Span[SPAN Port]\n    end\n\n    subgraph \"Suricata Engine\"\n        Capture[Packet Capture]\n        Decode[Protocol Decoder]\n        Detection[Detection Engine]\n        Logger[Event Logger]\n    end\n\n    subgraph \"Rule Management\"\n        Emerging[Emerging Threats]\n        Custom[Custom Rules]\n        ETPRO[ET Pro Rules]\n        Update[Rule Updates]\n    end\n\n    subgraph \"Analysis & Response\"\n        EVE[EVE JSON Logs]\n        Filebeat[Filebeat Shipper]\n        Elastic[Elasticsearch]\n        Kibana[Kibana Dashboard]\n        Wazuh[Wazuh SIEM]\n    end\n\n    Mirror --> Capture\n    Tap --> Capture\n    Span --> Capture\n\n    Capture --> Decode\n    Decode --> Detection\n    Detection --> Logger\n\n    Emerging --> Detection\n    Custom --> Detection\n    ETPRO --> Detection\n    Update --> Detection\n\n    Logger --> EVE\n    EVE --> Filebeat\n    Filebeat --> Elastic\n    Filebeat --> Wazuh\n    Elastic --> Kibana\n\n    style Detection fill:#f44336,color:#fff\n    style Elastic fill:#4caf50,color:#fff\n    style Kibana fill:#00bcd4,color:#fff\n",
          "line_count": 51,
          "start_pos": 565,
          "end_pos": 1718
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 51 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Network interfaces\naf-packet:\n  - interface: ens19f1  # Mirror interface\n    cluster-id: 99\n    cluster-type: cluster_flow\n    defrag: yes\n    use-mmap: yes\n    tpacket-v3: yes\n    ring-size: 200000\n\n# Home network configuration\nvars:\n  address-groups:\n    HOME_NET: \"[10.0.0.0/8,192.168.0.0/16,172.16.0.0/12]\"\n    EXTERNAL_NET: \"!$HOME_NET\"\n    DNS_SERVERS: \"[10.0.1.1,1.1.1.1,8.8.8.8]\"\n    HTTP_SERVERS: \"$HOME_NET\"\n    SMTP_SERVERS: \"$HOME_NET\"\n    SQL_SERVERS: \"$HOME_NET\"\n\n  port-groups:\n    HTTP_PORTS: \"80,443,8080,8443\"\n    SHELLCODE_PORTS: \"!80\"\n    SSH_PORTS: 22\n\n# Performance tuning\nthreading:\n  set-cpu-affinity: yes\n  cpu-affinity:\n    - management-cpu-set:\n        cpu: [ 0 ]\n    - receive-cpu-set:\n        cpu: [ 1,2,3,4 ]\n    - worker-cpu-set:\n        cpu: [ 5,6,7,8 ]\n\n# Enable EVE JSON output\noutputs:\n  - eve-log:\n      enabled: yes\n      filetype: regular\n      filename: eve.json\n      types:\n        - alert\n        - http\n        - dns\n        - tls\n        - files\n        - ssh\n        - flow\n",
          "line_count": 50,
          "start_pos": 3037,
          "end_pos": 4069
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 50 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Configure rule sources\nsudo suricata-update update-sources\n\n# Enable Emerging Threats Open rules\nsudo suricata-update enable-source et/open\n\n# Enable additional sources\nsudo suricata-update enable-source tgreen/hunting\nsudo suricata-update enable-source sslbl/ssl-fp-blacklist\nsudo suricata-update enable-source oisf/trafficid\n\n# Update rules\nsudo suricata-update\n\n# Schedule automatic updates\ncat << 'EOF' | sudo tee /etc/cron.daily/suricata-update\n#!/bin/bash\n/usr/bin/suricata-update\n/bin/systemctl reload suricata\nEOF\n\nsudo chmod +x /etc/cron.daily/suricata-update\n",
          "line_count": 22,
          "start_pos": 4113,
          "end_pos": 4695
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# /etc/filebeat/filebeat.yml\nfilebeat.inputs:\n- type: log\n  enabled: true\n  paths:\n    - /var/log/suricata/eve.json\n  json.keys_under_root: true\n  json.add_error_key: true\n  json.message_key: log\n\noutput.logstash:\n  hosts: [\"10.0.1.5:5044\"]\n  ssl.enabled: true\n  ssl.certificate_authorities: [\"/etc/filebeat/ca.crt\"]\n\nprocessors:\n  - add_host_metadata:\n  - add_cloud_metadata:\n  - add_docker_metadata:\n",
          "line_count": 19,
          "start_pos": 8567,
          "end_pos": 8980
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\"match\": {\"event_type\": \"alert\"}},\n        {\"range\": {\"@timestamp\": {\"gte\": \"now-1h\"}}}\n      ]\n    }\n  },\n  \"aggs\": {\n    \"top_signatures\": {\n      \"terms\": {\n        \"field\": \"alert.signature.keyword\",\n        \"size\": 10\n      }\n    },\n    \"severity_breakdown\": {\n      \"terms\": {\n        \"field\": \"alert.severity\",\n        \"size\": 3\n      }\n    }\n  }\n}\n",
          "line_count": 24,
          "start_pos": 10292,
          "end_pos": 10713
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "lua",
          "code": "-- /etc/suricata/lua/http-anomaly.lua\nfunction init(args)\n    local needs = {}\n    needs[\"http.request_headers\"] = tostring(true)\n    return needs\nend\n\nfunction match(args)\n    local headers = HttpGetRequestHeaders()\n    if headers == nil then\n        return 0\n    end\n\n    -- Check for multiple suspicious indicators\n    local score = 0\n\n    if string.match(headers, \"curl\") then\n        score = score + 1\n    end\n\n    if not string.match(headers, \"Accept:\") then\n        score = score + 1\n    end\n\n    if score >= 2 then\n        return 1\n    end\n\n    return 0\nend\n",
          "line_count": 30,
          "start_pos": 10794,
          "end_pos": 11370
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/suricata-maintenance.sh\n\n# Rotate logs\nsudo systemctl reload suricata\n\n# Update rules\nsudo suricata-update\n\n# Clean old logs (keep 30 days)\nfind /var/log/suricata/ -name \"*.json.*\" -mtime +30 -delete\n\n# Restart if needed\nsudo systemctl status suricata | grep -q \"running\" || sudo systemctl restart suricata\n",
          "line_count": 14,
          "start_pos": 12748,
          "end_pos": 13095
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Building a Network Traffic Analysis Lab with Suricata - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Building a Network Traffic Analysis Lab with Suricata - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Building a Network Traffic Analysis Lab with Suricata - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Building a Network Traffic Analysis Lab with Suricata - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Building a Network Traffic Analysis Lab with Suricata - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-09-01-self-hosted-bitwarden-migration-guide.md",
    "title": "Self-Hosted Password Manager Migration: Bitwarden Deep Dive",
    "metrics": {
      "total_lines": 667,
      "code_lines": 386,
      "code_blocks": 20,
      "code_ratio": 57.9,
      "text_lines": 281
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Client Access\"\n        Web[Web Vault]\n        Mobile[Mobile Apps]\n        Desktop[Desktop Apps]\n        Browser[Browser Extensions]\n    end\n\n    subgraph \"Bitwarden Server\"\n        Nginx[Nginx Reverse Proxy]\n        Vaultwarden[Vaultwarden Service]\n        DB[(SQLite/PostgreSQL)]\n    end\n\n    subgraph \"Security Layer\"\n        Firewall[Firewall Rules]\n        WAF[ModSecurity WAF]\n        Fail2ban[Fail2ban]\n        TLS[TLS 1.3]\n    end\n\n    subgraph \"Backup & Recovery\"\n        Local[Local Backups]\n        Offsite[Offsite Backups]\n        Encrypted[Encrypted Storage]\n        Versioned[Version Control]\n    end\n\n    Web --> Nginx\n    Mobile --> Nginx\n    Desktop --> Nginx\n    Browser --> Nginx\n\n    Nginx --> WAF\n    WAF --> Vaultwarden\n    Vaultwarden --> DB\n\n    Firewall --> Nginx\n    Fail2ban --> Nginx\n    TLS --> Nginx\n\n    DB --> Local\n    Local --> Encrypted\n    Encrypted --> Offsite\n    Offsite --> Versioned\n\n    style Vaultwarden fill:#4caf50,color:#fff\n    style WAF fill:#ff9800,color:#fff\n    style Encrypted fill:#f44336,color:#fff\n",
          "line_count": 49,
          "start_pos": 573,
          "end_pos": 1662
        },
        "suggestions": [
          {
            "type": "split",
            "reason": "Code block has 49 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# docker-compose.yml\nversion: '3.8'\n\nservices:\n  vaultwarden:\n    image: vaultwarden/server:latest\n    container_name: vaultwarden\n    restart: unless-stopped\n    environment:\n      - DOMAIN=https://vault.example.com\n      - SIGNUPS_ALLOWED=false\n      - INVITATIONS_ALLOWED=true\n      - ADMIN_TOKEN=${ADMIN_TOKEN}\n      - SMTP_HOST=smtp.gmail.com\n      - SMTP_FROM=no-reply@example.com\n      - SMTP_PORT=587\n      - SMTP_SECURITY=starttls\n      - SMTP_USERNAME=${SMTP_USERNAME}\n      - SMTP_PASSWORD=${SMTP_PASSWORD}\n      - LOG_LEVEL=info\n      - EXTENDED_LOGGING=true\n      - DATABASE_URL=postgresql://bitwarden:${DB_PASSWORD}@postgres:5432/bitwarden\n    volumes:\n      - ./vw-data:/data\n    depends_on:\n      - postgres\n    networks:\n      - bitwarden-net\n\n  postgres:\n    image: postgres:15-alpine\n    container_name: vaultwarden-db\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=bitwarden\n      - POSTGRES_USER=bitwarden\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - ./postgres-data:/var/lib/postgresql/data\n    networks:\n      - bitwarden-net\n\n  backup:\n    image: tiredofit/db-backup\n    container_name: vaultwarden-backup\n    restart: unless-stopped\n    environment:\n      - DB_TYPE=postgres\n      - DB_HOST=postgres\n      - DB_NAME=bitwarden\n      - DB_USER=bitwarden\n      - DB_PASS=${DB_PASSWORD}\n      - DB_DUMP_FREQ=1440\n      - DB_DUMP_BEGIN=0300\n      - DB_CLEANUP_TIME=8640\n      - COMPRESSION=GZ\n    volumes:\n      - ./backups:/backup\n    depends_on:\n      - postgres\n    networks:\n      - bitwarden-net\n\nnetworks:\n  bitwarden-net:\n    driver: bridge\n",
          "line_count": 66,
          "start_pos": 3093,
          "end_pos": 4707
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 66 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Create directories\nmkdir -p ~/bitwarden/{vw-data,postgres-data,backups}\ncd ~/bitwarden\n\n# Create docker-compose.yml and .env\n# (use files above)\n\n# Set secure permissions\nchmod 600 .env\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f vaultwarden\n",
          "line_count": 15,
          "start_pos": 4950,
          "end_pos": 5237
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "nginx",
          "code": "# /etc/nginx/sites-available/bitwarden\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name vault.example.com;\n\n    # TLS configuration\n    ssl_certificate /etc/letsencrypt/live/vault.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/vault.example.com/privkey.pem;\n    ssl_session_timeout 1d;\n    ssl_session_cache shared:MozSSL:10m;\n    ssl_session_tickets off;\n\n    # Modern TLS configuration\n    ssl_protocols TLSv1.3;\n    ssl_prefer_server_ciphers off;\n\n    # HSTS\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always;\n\n    # Security headers\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"same-origin\" always;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=bitwarden_login:10m rate=10r/m;\n    limit_req zone=bitwarden_login burst=5 nodelay;\n\n    # Client body size (for attachments)\n    client_max_body_size 525M;\n\n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 300s;\n    }\n\n    location /notifications/hub {\n        proxy_pass http://127.0.0.1:3012;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n\n    location /notifications/hub/negotiate {\n        proxy_pass http://127.0.0.1:8080;\n    }\n\n    # Admin panel rate limiting\n    location /admin {\n        limit_req zone=bitwarden_login burst=2 nodelay;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\n# HTTP redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name vault.example.com;\n    return 301 https://$server_name$request_uri;\n}\n",
          "line_count": 68,
          "start_pos": 5291,
          "end_pos": 7348
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 68 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# UFW firewall configuration\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# Allow SSH (change port if using non-standard)\nsudo ufw allow 22/tcp\n\n# Allow HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# Enable firewall\nsudo ufw enable\n\n# Check status\nsudo ufw status verbose\n",
          "line_count": 16,
          "start_pos": 8386,
          "end_pos": 8700
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/backup-vaultwarden.sh\n\nBACKUP_DIR=\"/mnt/backups/vaultwarden\"\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup database\ndocker exec vaultwarden-db pg_dump -U bitwarden bitwarden | \\\n    gzip > \"$BACKUP_DIR/bitwarden_$DATE.sql.gz\"\n\n# Backup attachments and data\ntar -czf \"$BACKUP_DIR/vw-data_$DATE.tar.gz\" -C /home/user/bitwarden/vw-data .\n\n# Encrypt backups\ngpg --encrypt --recipient your-email@example.com \\\n    \"$BACKUP_DIR/bitwarden_$DATE.sql.gz\"\n\ngpg --encrypt --recipient your-email@example.com \\\n    \"$BACKUP_DIR/vw-data_$DATE.tar.gz\"\n\n# Remove unencrypted backups\nrm \"$BACKUP_DIR/bitwarden_$DATE.sql.gz\"\nrm \"$BACKUP_DIR/vw-data_$DATE.tar.gz\"\n\n# Remove old backups\nfind \"$BACKUP_DIR\" -name \"*.gpg\" -mtime +$RETENTION_DAYS -delete\n\n# Sync to offsite location (Backblaze B2, rsync, etc.)\nrclone copy \"$BACKUP_DIR\" remote:vaultwarden-backups/\n",
          "line_count": 33,
          "start_pos": 9959,
          "end_pos": 10901
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 9 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 33 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# /usr/local/bin/check-vaultwarden.sh\n\nVAULT_URL=\"https://vault.example.com\"\nADMIN_TOKEN=\"your-admin-token\"\n\n# Check if service is responding\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" \"$VAULT_URL\")\n\nif [ \"$HTTP_STATUS\" -ne 200 ]; then\n    echo \"ERROR: Vaultwarden returned HTTP $HTTP_STATUS\"\n    # Send alert (email, Telegram, etc.)\n    exit 1\nfi\n\n# Check SSL certificate expiry\nCERT_DAYS=$(echo | openssl s_client -servername vault.example.com \\\n    -connect vault.example.com:443 2>/dev/null | \\\n    openssl x509 -noout -dates | grep \"notAfter\" | cut -d= -f2)\n\nEXPIRY_EPOCH=$(date -d \"$CERT_DAYS\" +%s)\nNOW_EPOCH=$(date +%s)\nDAYS_LEFT=$(( ($EXPIRY_EPOCH - $NOW_EPOCH) / 86400 ))\n\nif [ \"$DAYS_LEFT\" -lt 30 ]; then\n    echo \"WARNING: SSL certificate expires in $DAYS_LEFT days\"\nfi\n\n# Check database size\nDB_SIZE=$(docker exec vaultwarden-db psql -U bitwarden -t -c \\\n    \"SELECT pg_size_pretty(pg_database_size('bitwarden'));\")\n\necho \"Database size: $DB_SIZE\"\n\n# Check backup status\nLATEST_BACKUP=$(find /mnt/backups/vaultwarden -name \"*.gpg\" -type f -printf '%T@ %p\\n' | \\\n    sort -n | tail -1 | cut -d' ' -f2-)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"ERROR: No backups found\"\n    exit 1\nfi\n\nBACKUP_AGE=$(( ($(date +%s) - $(stat -c %Y \"$LATEST_BACKUP\")) / 3600 ))\n\nif [ \"$BACKUP_AGE\" -gt 26 ]; then\n    echo \"ERROR: Latest backup is $BACKUP_AGE hours old\"\n    exit 1\nfi\n\necho \"\u2705 All checks passed\"\n",
          "line_count": 51,
          "start_pos": 11543,
          "end_pos": 12980
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 13 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 51 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Add to docker-compose.yml\n  vaultwarden-exporter:\n    image: vaultwarden/vaultwarden-exporter:latest\n    container_name: vaultwarden-exporter\n    restart: unless-stopped\n    environment:\n      - VAULTWARDEN_URL=http://vaultwarden:80\n    ports:\n      - \"9998:9998\"\n    networks:\n      - bitwarden-net\n",
          "line_count": 11,
          "start_pos": 13038,
          "end_pos": 13351
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Install Bitwarden CLI\nnpm install -g @bitwarden/cli\n\n# Configure server\nbw config server https://vault.example.com\n\n# Login\nbw login your-email@example.com\n\n# Unlock vault\nexport BW_SESSION=$(bw unlock --raw)\n\n# List items\nbw list items\n\n# Get specific password\nbw get password github.com\n",
          "line_count": 17,
          "start_pos": 13913,
          "end_pos": 14215
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Self-Hosted Password Manager Migration: Bitwarden Deep Dive - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "network",
        "title": "Self-Hosted Password Manager Migration: Bitwarden Deep Dive - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-09-20-iot-security-homelab-owasp.md",
    "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat",
    "metrics": {
      "total_lines": 375,
      "code_lines": 195,
      "code_blocks": 11,
      "code_ratio": 52.0,
      "text_lines": 180
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "bash",
          "code": "# Clone the repository\ngit clone [https://github.com/OWASP/IoTGoat.git](https://github.com/OWASP/IoTGoat.git)\ncd IoTGoat\n\n# Build the Docker container (isolated environment)\ndocker build -t iotgoat .\n\n# Run with network isolation\ndocker network create --driver bridge iot-isolated\ndocker run -d --name iotgoat \\\n    --network iot-isolated \\\n    -p 8080:80 \\\n    -p 1883:1883 \\\n    -p 8883:8883 \\\n    iotgoat\n",
          "line_count": 15,
          "start_pos": 2837,
          "end_pos": 3256
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import telnetlib\nimport time\n\n# Common default credentials in IoT devices\ncredentials = [\n    ('admin', 'admin'),\n    ('root', 'root'),\n    ('admin', '1234'),\n    ('user', 'user'),\n    ('admin', 'password')\n]\n\ndef test_telnet_auth(host, port=23):\n    \"\"\"Test for default credentials on telnet service\"\"\"\n    for username, password in credentials:\n        try:\n            tn = telnetlib.Telnet(host, port, timeout=5)\n            tn.read_until(b\"login: \")\n            tn.write(username.encode() + b\"\\n\")\n            tn.read_until(b\"Password: \")\n            tn.write(password.encode() + b\"\\n\")\n\n            result = tn.read_some()\n            if b\"#\" in result or b\"$\" in result:\n                print(f\"[+] Found credentials: {username}:{password}\")\n                return True\n        except:\n            continue\n    return False\n",
          "line_count": 29,
          "start_pos": 3901,
          "end_pos": 4745
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "reduce",
            "reason": "Has 6 import/setup lines that could be minimized",
            "priority": "low"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import paho.mqtt.client as mqtt\nimport json\n\nclass MQTTExplorer:\n    def __init__(self, broker_addr):\n        self.broker = broker_addr\n        self.client = mqtt.Client()\n        self.discovered_topics = set()\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            print(\"[+] Connected to MQTT broker\")\n            # Subscribe to all topics\n            client.subscribe(\"#\", 0)\n            client.subscribe(\"$SYS/#\", 0)\n\n    def on_message(self, client, userdata, msg):\n        self.discovered_topics.add(msg.topic)\n        print(f\"[*] Topic: {msg.topic}\")\n        print(f\"    Payload: {msg.payload.decode('utf-8', 'ignore')}\")\n\n        # Check for sensitive data patterns\n        payload = msg.payload.decode('utf-8', 'ignore')\n        if any(keyword in payload.lower() for keyword in\n               ['password', 'token', 'key', 'secret']):\n            print(\"[!] Potential sensitive data found!\")\n\nexplorer = MQTTExplorer(\"iotgoat.local\")\nexplorer.client.on_connect = explorer.on_connect\nexplorer.client.on_message = explorer.on_message\nexplorer.client.connect(explorer.broker, 1883, 60)\nexplorer.client.loop_forever()\n",
          "line_count": 32,
          "start_pos": 5361,
          "end_pos": 6529
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 32 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Extract firmware with binwalk\nbinwalk -e iotgoat_firmware.bin\n\n# Search for hardcoded secrets\ngrep -r \"password\\|passwd\\|pwd\\|api_key\\|secret\" _iotgoat_firmware.bin.extracted/\n\n# Extract file system if squashfs\nunsquashfs -d extracted_fs _iotgoat_firmware.bin.extracted/*.squashfs\n\n# Analyze binaries for vulnerabilities\nchecksec --file=extracted_fs/usr/bin/iot_service\n",
          "line_count": 11,
          "start_pos": 7189,
          "end_pos": 7572
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import requests\n\ndef test_command_injection(url, param_name):\n    \"\"\"Test for command injection vulnerabilities\"\"\"\n    payloads = [\n        \"; cat /etc/passwd\",\n        \"| cat /etc/shadow\",\n        \"$(cat /proc/self/environ)\",\n        \"`id`\"\n    ]\n\n    for payload in payloads:\n        data = {param_name: f\"test{payload}\"}\n        response = requests.post(url, data=data)\n\n        if \"root:\" in response.text or \"uid=\" in response.text:\n            print(f\"[!] Command injection found with: {payload}\")\n            return True\n    return False\n",
          "line_count": 19,
          "start_pos": 8268,
          "end_pos": 8826
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import ssl\nimport paho.mqtt.client as mqtt\n\ndef create_secure_mqtt_client():\n    client = mqtt.Client()\n\n    # Configure TLS\n    client.tls_set(\n        ca_certs=\"/path/to/ca-certificate.crt\",\n        certfile=\"/path/to/client-certificate.crt\",\n        keyfile=\"/path/to/client-key.key\",\n        cert_reqs=ssl.CERT_REQUIRED,\n        tls_version=ssl.PROTOCOL_TLSv1_2\n    )\n\n    # Enable certificate hostname checking\n    client.tls_insecure_set(False)\n\n    return client\n",
          "line_count": 19,
          "start_pos": 10571,
          "end_pos": 11054
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "from scapy.all import *\nimport json\nfrom datetime import datetime\n\nclass IoTMonitor:\n    def __init__(self):\n        self.suspicious_patterns = []\n        self.device_profiles = {}\n\n    def packet_callback(self, packet):\n        if packet.haslayer(IP):\n            src_ip = packet[IP].src\n            dst_ip = packet[IP].dst\n\n            # Track device behavior\n            if src_ip.startswith(\"192.168.20.\"):  # IoT VLAN\n                self.profile_device(src_ip, dst_ip, packet)\n\n                # Detect anomalies\n                if self.is_suspicious(packet):\n                    self.alert(packet)\n\n    def is_suspicious(self, packet):\n        # Check for unexpected destinations\n        if packet.haslayer(TCP):\n            dst_port = packet[TCP].dport\n            if dst_port in [23, 22, 3389]:  # Telnet, SSH, RDP\n                return True\n\n        # Check for large data transfers\n        if packet.haslayer(Raw):\n            if len(packet[Raw].load) > 10000:\n                return True\n\n        return False\n",
          "line_count": 35,
          "start_pos": 12219,
          "end_pos": 13255
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 35 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "IoT Security in Your Home Lab: Lessons from OWASP IoTGoat - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-08-18-container-security-hardening-homelab.md",
    "title": "Container Security Hardening in My Homelab",
    "metrics": {
      "total_lines": 718,
      "code_lines": 352,
      "code_blocks": 26,
      "code_ratio": 49.0,
      "text_lines": 366
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Build Time Security\"\n        Base[Base Image Selection]\n        Scan[Vulnerability Scanning]\n        Secrets[Secrets Management]\n        Build[Secure Build Process]\n    end\n\n    subgraph \"Runtime Security\"\n        Runtime[Runtime Protection]\n        Network[Network Policies]\n        Resources[Resource Limits]\n        Monitor[Continuous Monitoring]\n    end\n\n    subgraph \"Defense Layers\"\n        AppArmor[AppArmor/SELinux]\n        Seccomp[Seccomp Profiles]\n        Capabilities[Capability Dropping]\n        RO[Read-Only Filesystems]\n    end\n\n    Base --> Scan\n    Scan --> Secrets\n    Secrets --> Build\n\n    Build --> Runtime\n    Runtime --> Network\n    Network --> Resources\n    Resources --> Monitor\n\n    Runtime --> AppArmor\n    Runtime --> Seccomp\n    Runtime --> Capabilities\n    Runtime --> RO\n\n    style Scan fill:#f44336,color:#fff\n    style Runtime fill:#ff9800,color:#fff\n    style Monitor fill:#4caf50,color:#fff\n",
          "line_count": 39,
          "start_pos": 1005,
          "end_pos": 1967
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 39 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "dockerfile",
          "code": "# Stage 1: Build\nFROM golang:1.21-alpine AS builder\nWORKDIR /build\nCOPY . .\nRUN CGO_ENABLED=0 go build -ldflags=\"-s -w\" -o app\n\n# Stage 2: Runtime (distroless)\nFROM gcr.io/distroless/static-debian11:nonroot\nCOPY --from=builder /build/app /app\nUSER nonroot:nonroot\nENTRYPOINT [\"/app\"]\n",
          "line_count": 11,
          "start_pos": 4024,
          "end_pos": 4325
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "#!/bin/bash\n# scan-image.sh\n\nIMAGE=$1\nSEVERITY_THRESHOLD=\"HIGH\"\n\necho \"Scanning $IMAGE for vulnerabilities...\"\n\n# Scan with Grype\ngrype \"$IMAGE\" -o json > scan-results.json\n\n# Check for critical/high vulnerabilities\nCRITICAL=$(jq '[.matches[] | select(.vulnerability.severity==\"Critical\")] | length' scan-results.json)\nHIGH=$(jq '[.matches[] | select(.vulnerability.severity==\"High\")] | length' scan-results.json)\n\necho \"Found $CRITICAL critical and $HIGH high vulnerabilities\"\n\nif [ \"$CRITICAL\" -gt 0 ] || [ \"$HIGH\" -gt 5 ]; then\n    echo \"\u274c Image failed security scan\"\n    exit 1\nfi\n\necho \"\u2705 Image passed security scan\"\n",
          "line_count": 23,
          "start_pos": 4903,
          "end_pos": 5536
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 7 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "name: Container Security Scan\n\non: [push, pull_request]\n\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Build image\n        run: docker build -t myapp:test .\n\n      - name: Run Grype scan\n        uses: anchore/scan-action@v3\n        with:\n          image: \"myapp:test\"\n          fail-build: true\n          severity-cutoff: high\n\n      - name: Run Trivy scan\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'myapp:test'\n          format: 'sarif'\n          output: 'trivy-results.sarif'\n",
          "line_count": 26,
          "start_pos": 5572,
          "end_pos": 6156
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# docker-compose.yml with secrets\nversion: '3.8'\nservices:\n  app:\n    image: myapp:latest\n    secrets:\n      - db_password\n      - api_key\n    environment:\n      DB_PASSWORD_FILE: /run/secrets/db_password\n      API_KEY_FILE: /run/secrets/api_key\n\nsecrets:\n  db_password:\n    file: ./secrets/db_password.txt\n  api_key:\n    file: ./secrets/api_key.txt\n",
          "line_count": 17,
          "start_pos": 6801,
          "end_pos": 7162
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Install sealed-secrets controller\nkubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/controller.yaml\n\n# Create and seal a secret\nkubectl create secret generic db-creds \\\n  --from-literal=password='mypassword' \\\n  --dry-run=client -o yaml | \\\nkubeseal -o yaml > sealed-secret.yaml\n\n# Safe to commit sealed-secret.yaml to git\nkubectl apply -f sealed-secret.yaml\n",
          "line_count": 11,
          "start_pos": 7196,
          "end_pos": 7608
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "apiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: myapp:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n",
          "line_count": 20,
          "start_pos": 9462,
          "end_pos": 9854
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Default deny all traffic\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n\n---\n# Allow specific traffic\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-web-to-api\nspec:\n  podSelector:\n    matchLabels:\n      app: api\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: web\n    ports:\n    - protocol: TCP\n      port: 8080\n",
          "line_count": 31,
          "start_pos": 10764,
          "end_pos": 11278
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 31 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# docker-compose.yml\nservices:\n  app:\n    image: myapp:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n          memory: 512M\n        reservations:\n          cpus: '0.5'\n          memory: 256M\n    ulimits:\n      nofile:\n        soft: 1024\n        hard: 2048\n      nproc:\n        soft: 64\n        hard: 128\n",
          "line_count": 19,
          "start_pos": 11339,
          "end_pos": 11682
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# /etc/apparmor.d/docker-myapp\n#include <tunables/global>\n\nprofile docker-myapp flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n\n  # Deny all file writes except to /tmp\n  deny /** w,\n  /tmp/** rw,\n\n  # Allow reading config\n  /etc/myapp/** r,\n\n  # Network access\n  network inet tcp,\n  network inet udp,\n}\n",
          "line_count": 17,
          "start_pos": 12806,
          "end_pos": 13150
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "json",
          "code": "{\n  \"defaultAction\": \"SCMP_ACT_ERRNO\",\n  \"architectures\": [\n    \"SCMP_ARCH_X86_64\",\n    \"SCMP_ARCH_X86\",\n    \"SCMP_ARCH_X32\"\n  ],\n  \"syscalls\": [\n    {\n      \"names\": [\n        \"accept4\", \"bind\", \"connect\", \"read\", \"write\",\n        \"close\", \"stat\", \"fstat\", \"open\", \"openat\"\n      ],\n      \"action\": \"SCMP_ACT_ALLOW\"\n    }\n  ]\n}\n",
          "line_count": 17,
          "start_pos": 13339,
          "end_pos": 13679
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# K3s pod with read-only root\napiVersion: v1\nkind: Pod\nmetadata:\n  name: readonly-app\nspec:\n  containers:\n  - name: app\n    image: myapp:latest\n    securityContext:\n      readOnlyRootFilesystem: true\n    volumeMounts:\n    - name: tmp\n      mountPath: /tmp\n    - name: cache\n      mountPath: /app/cache\n  volumes:\n  - name: tmp\n    emptyDir: {}\n  - name: cache\n    emptyDir: {}\n",
          "line_count": 21,
          "start_pos": 14768,
          "end_pos": 15156
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# /etc/falco/rules.d/custom-rules.yaml\n- rule: Unauthorized Process in Container\n  desc: Detect unauthorized process execution\n  condition: >\n    spawned_process and\n    container and\n    not proc.name in (node, python3, java)\n  output: >\n    Unauthorized process started in container\n    (user=%user.name command=%proc.cmdline container=%container.name)\n  priority: WARNING\n\n- rule: Container Drift Detection\n  desc: Detect binary execution from non-standard locations\n  condition: >\n    spawned_process and\n    container and\n    not proc.exepath startswith /usr\n  output: >\n    Binary executed from unexpected location\n    (command=%proc.cmdline path=%proc.exepath container=%container.name)\n  priority: ERROR\n",
          "line_count": 22,
          "start_pos": 15540,
          "end_pos": 16263
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# filebeat.yml for container logs\nfilebeat.inputs:\n- type: container\n  paths:\n    - /var/lib/docker/containers/*/*.log\n  processors:\n    - add_docker_metadata:\n        host: \"unix:///var/run/docker.sock\"\n\noutput.logstash:\n  hosts: [\"wazuh:5044\"]\n",
          "line_count": 11,
          "start_pos": 16330,
          "end_pos": 16587
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Require security contexts\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredSecurityContext\nmetadata:\n  name: require-security-context\nspec:\n  match:\n    kinds:\n      - apiGroups: [\"\"]\n        kinds: [\"Pod\"]\n  parameters:\n    requiredFields:\n      - runAsNonRoot\n      - readOnlyRootFilesystem\n",
          "line_count": 14,
          "start_pos": 17035,
          "end_pos": 17355
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Container Security Hardening in My Homelab - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Container Security Hardening in My Homelab - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Container Security Hardening in My Homelab - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-07-08-implementing-dns-over-https-home-networks.md",
    "title": "Implementing DNS-over-HTTPS (DoH) for Home Networks",
    "metrics": {
      "total_lines": 419,
      "code_lines": 182,
      "code_blocks": 22,
      "code_ratio": 43.4,
      "text_lines": 237
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 863,
          "end_pos": 1415
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Test using curl\ncurl -H 'content-type: application/dns-message' \\\n     --data-binary @<(echo -n 'q80BAAABAAAAAAAAA3d3dwdleGFtcGxlA2NvbQAAAQAB' | base64 -d) \\\n     [https://cloudflare-dns.com/dns-query](https://cloudflare-dns.com/dns-query) | hexdump -C\n\n# Test using dog (better than dig for DoH)\ndog example.com @[https://cloudflare-dns.com/dns-query](https://cloudflare-dns.com/dns-query)\n\n# Check for DNS leaks\n# Visit: [https://dnsleaktest.com](https://dnsleaktest.com)\n# Should only show your configured DoH provider\n",
          "line_count": 11,
          "start_pos": 5877,
          "end_pos": 6412
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# iptables rules to force DoH\n# Block standard DNS (port 53) except from DoH proxy\niptables -A OUTPUT -p udp --dport 53 -m owner ! --uid-owner cloudflared -j DROP\niptables -A OUTPUT -p tcp --dport 53 -m owner ! --uid-owner cloudflared -j DROP\n\n# Block DNS-over-TLS (port 853)\niptables -A OUTPUT -p tcp --dport 853 -j DROP\n\n# Allow only DoH proxy to make HTTPS connections to DNS providers\niptables -A OUTPUT -p tcp --dport 443 -d 1.1.1.1 -m owner ! --uid-owner cloudflared -j DROP\niptables -A OUTPUT -p tcp --dport 443 -d 8.8.8.8 -m owner ! --uid-owner cloudflared -j DROP\n",
          "line_count": 11,
          "start_pos": 7790,
          "end_pos": 8374
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Implementing DNS-over-HTTPS (DoH) for Home Networks - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Implementing DNS-over-HTTPS (DoH) for Home Networks - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-08-07-supercharging-development-claude-flow.md",
    "title": "Supercharging Development with Claude-Flow: AI Swarm Intelligence for Modern Engineering",
    "metrics": {
      "total_lines": 548,
      "code_lines": 227,
      "code_blocks": 26,
      "code_ratio": 41.4,
      "text_lines": 321
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Swarm Topologies\"\n        Mesh[Mesh - P2P Collaboration]\n        Hier[Hierarchical - Queen/Worker]\n        Ring[Ring - Sequential Pipeline]\n        Star[Star - Centralized Control]\n    end\n    \n    subgraph \"Core Agents\"\n        Orch[\ud83c\udfad Orchestrator]\n        Research[\ud83d\udd0d Researcher]\n        Arch[\ud83c\udfd7\ufe0f Architect]\n        Coder[\ud83d\udcbb Coder]\n        Tester[\ud83e\uddea Tester]\n    end\n    \n    subgraph \"Intelligence Layer\"\n        Memory[(\ud83d\udcbe Persistent Memory)]\n        Neural[\ud83e\udde0 Neural Training]\n        Pattern[\ud83d\udd04 Pattern Recognition]\n    end\n    \n    Mesh --> Orch\n    Hier --> Orch\n    Ring --> Orch\n    Star --> Orch\n    \n    Orch --> Research\n    Orch --> Arch\n    Orch --> Coder\n    Orch --> Tester\n    \n    Research --> Memory\n    Arch --> Pattern\n    Coder --> Neural\n    Tester --> Memory\n    \n    style Orch fill:#9c27b0,stroke:#fff,stroke-width:2px,color:#fff\n    style Memory fill:#ffd54f,stroke:#333,stroke-width:2px\n    style Neural fill:#4caf50,stroke:#fff,stroke-width:2px,color:#fff\n",
          "line_count": 40,
          "start_pos": 1970,
          "end_pos": 2985
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "split",
            "reason": "Code block has 40 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "javascript",
          "code": "// Hierarchical: Queen-worker pattern for complex coordination\nnpx claude-flow swarm init --topology hierarchical --max-agents 8\n\n// Mesh: Peer-to-peer for collaborative tasks\nnpx claude-flow swarm init --topology mesh --strategy balanced\n\n// Ring: Sequential processing for pipelines\nnpx claude-flow swarm init --topology ring --max-agents 5\n\n// Star: Centralized coordination for focused tasks\nnpx claude-flow swarm init --topology star --strategy specialized\n",
          "line_count": 11,
          "start_pos": 2987,
          "end_pos": 3466
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Analyze development workflow\nnpx claude-flow bottleneck analyze --component \"test-suite\"\n\n# Auto-optimize based on findings\nnpx claude-flow topology optimize --swarm-id current\n",
          "line_count": 5,
          "start_pos": 6531,
          "end_pos": 6721
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "flowchart LR\n    S[\ud83d\udccb Specification] --> P[\ud83d\udd22 Pseudocode]\n    P --> A[\ud83c\udfdb\ufe0f Architecture]\n    A --> R[\ud83d\udd27 Refinement]\n    R --> C[\u2705 Completion]\n    \n    S -.-> M1[Define Requirements]\n    P -.-> M2[Design Algorithms]\n    A -.-> M3[System Structure]\n    R -.-> M4[TDD & Iteration]\n    C -.-> M5[Integration & Deploy]\n    \n    style S fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style P fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    style A fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    style R fill:#e8f5e9,stroke:#388e3c,stroke-width:2px\n    style C fill:#ffebee,stroke:#d32f2f,stroke-width:2px\n",
          "line_count": 17,
          "start_pos": 7101,
          "end_pos": 7714
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Begin with simple tasks\nnpx claude-flow agent spawn --type coder\nnpx claude-flow task orchestrate \"Add input validation to user form\"\n\n# Gradually increase complexity\nnpx claude-flow swarm init --topology mesh --max-agents 5\nnpx claude-flow sparc tdd \"Implement complete payment processing system\"\n",
          "line_count": 7,
          "start_pos": 9541,
          "end_pos": 9852
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "javascript",
          "code": "// Store critical decisions\nawait claudeFlow.memory.store({\n  key: 'architecture/api/auth',\n  value: {\n    method: 'JWT',\n    expiry: '24h',\n    refresh: true,\n    rationale: 'Stateless, scalable, industry standard'\n  },\n  ttl: null // Permanent storage\n});\n\n// Reference in future sessions\nconst authDecision = await claudeFlow.memory.retrieve('architecture/api/auth');\n",
          "line_count": 14,
          "start_pos": 9885,
          "end_pos": 10273
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# claude-flow.config.json\n{\n  \"features\": {\n    \"selfHealingWorkflows\": true,\n    \"autoTopologySelection\": true,\n    \"smartAutoSpawning\": true\n  },\n  \"recovery\": {\n    \"maxRetries\": 3,\n    \"fallbackStrategy\": \"redistribute\",\n    \"alertOnFailure\": true\n  }\n}\n",
          "line_count": 13,
          "start_pos": 10593,
          "end_pos": 10862
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "javascript",
          "code": "// claude-flow.config.json\n{\n  \"features\": {\n    \"autoTopologySelection\": true,  // Let AI choose best topology\n    \"parallelExecution\": true,       // Enable parallel processing\n    # ... (additional implementation details)\n  }\n}\n",
          "line_count": 8,
          "start_pos": 11389,
          "end_pos": 11637
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Ensure production readiness\nnpx claude-flow sparc pipeline \\\n  \"Build feature -> Write tests -> Security audit -> Performance test -> Documentation -> Deploy\"\n\n# Validate before deployment\nnpx claude-flow agent spawn --type production-validator\nnpx claude-flow task orchestrate \"Validate: all production criteria met\"\n",
          "line_count": 7,
          "start_pos": 12494,
          "end_pos": 12825
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Supercharging Development with Claude-Flow: AI Swarm Intelligence for Modern Engineering - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Supercharging Development with Claude-Flow: AI Swarm Intelligence for Modern Engineering - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Supercharging Development with Claude-Flow: AI Swarm Intelligence for Modern Engineering - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Supercharging Development with Claude-Flow: AI Swarm Intelligence for Modern Engineering - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "high"
  },
  {
    "file": "2025-04-10-securing-personal-ai-experiments.md",
    "title": "Securing Your Personal AI/ML Experiments: A Practical Guide",
    "metrics": {
      "total_lines": 255,
      "code_lines": 100,
      "code_blocks": 11,
      "code_ratio": 39.2,
      "text_lines": 155
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 888,
          "end_pos": 1509
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import psutil\nimport GPUtil\nimport logging\nfrom datetime import datetime\n\n    # ... (additional implementation details)\n        \n        return suspicious_processes\n",
          "line_count": 8,
          "start_pos": 3743,
          "end_pos": 3921
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "class PrivacyPreservingAI:\n    def __init__(self):\n        self.pii_patterns = {\n            'email': r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b',\n            'phone': r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b',\n    # ... (additional implementation details)\n        \n        return processed_data\n",
          "line_count": 8,
          "start_pos": 4066,
          "end_pos": 4377
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Securing Your Personal AI/ML Experiments: A Practical Guide - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Securing Your Personal AI/ML Experiments: A Practical Guide - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Securing Your Personal AI/ML Experiments: A Practical Guide - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-07-22-supercharging-claude-cli-with-standards.md",
    "title": "Exploring Claude CLI Context and Compliance with My Standards Repository",
    "metrics": {
      "total_lines": 368,
      "code_lines": 142,
      "code_blocks": 14,
      "code_ratio": 38.6,
      "text_lines": 226
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1269,
          "end_pos": 1890
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "plain",
          "code": "\n## Lessons Learned (The Hard Way)\n\n### The Pre-Commit Hook Nightmare\n\nI set up a pre-commit hook to run standards validation automatically. First attempt? **100% failure rate**. Every single commit got blocked. After 2 hours of debugging, I discovered the hook was calling the wrong Python interpreter. The PATH issues were subtle but annoying. Now it catches violations automatically, but I'm still tuning the sensitivity.\n\nThe trade-off is real: automated validation is fast and catches issues **but** produces false positives that slow down workflow. I've found strict enforcement improves quality **though** it definitely adds friction to rapid prototyping.\n\n### False Positive Hell\n\nMy initial validation script flagged **312 \"violations\"** across all 55 blog posts. I manually reviewed each one. Turns out **276 were false positives** (88% false positive rate). I spent 3 days tuning regex patterns and adjusting thresholds to get the FP rate down to 4%. That was tedious work, but probably worth it.\n\nThe lesson? Standards prevent errors **but** require constant refinement. Automation is powerful **yet** needs human oversight to avoid becoming a blocker.\n\n### Template Validation: When the Template is Wrong\n\nI created a blog post template to ensure consistency. First 5 posts using it: 2 passed validation, 3 failed due to subtle frontmatter issues. Turns out the template was wrong, not the posts. After fixing the template, I validated all 48 past posts again (34 minutes of scan time). Found 6 more issues that had propagated from the bad template.\n\nTemplates ensure consistency **but** may constrain creativity. They're helpful **however** they can also propagate errors systematically.\n\n### The CLAUDE.md Evolution\n\nMy CLAUDE.md file grew from 120 lines (v1.0) to 2,847 lines (v3.0) over 6 months. Each version added lessons from failed automation attempts. I probably rewrote section 4 (enforcement rules) 12 times before I got it right. Or maybe I still haven't got it right. I'm not sure if the complexity is worth it, but it seems to catch more edge cases now.\n\nThe **trade-off** between comprehensive rules and maintainability is constant. More rules catch more issues **though** they make the system harder to understand and modify.\n\n### Validation Speed: Fast but Hungry\n\nInitial validation script took **147 seconds** to scan all posts. That's too slow for a pre-commit hook. After optimization with parallel processing and caching, I reduced it to **12 seconds**. Much better. The cost? Memory usage went from 1.8GB to 2.1GB (15% increase). For my laptop, that's acceptable **but** might be a problem on CI servers with limited RAM.\n\nI think the speed improvement is worth the memory cost for my use case, though it could be an issue for larger codebases.\n\n### Git Hook Bypass Discovery\n\nI discovered I could bypass standards validation with `git commit --no-verify`. That defeated the entire purpose. I immediately disabled that option by making hooks exit with code 1 on detection. The cost? 3 commits got rejected that I thought were fine (humbling moment). Turns out my judgment of \"good enough\" isn't always aligned with the standards I set for myself.\n\nThis taught me that automation doesn't trust humans, which is both frustrating **and** valuable. Human judgment is flexible **but** inconsistent.\n\n### What Worked\n\n1. **Start small**: I began with just Python standards, expanded gradually\n2. **Version everything**: Standards evolve, Git tracks the journey\n3. **Real examples**: Abstract standards work poorly, concrete code examples work better\n4. **Token counting**: Every character matters for LLM efficiency (I measured roughly 90% reduction after optimization)\n\n### What Didn't\n\n1. **Over-engineering**: My first version had 200+ micro-standards. Way too much complexity.\n2. **Perfect structure**: Spent weeks organizing folders. Claude doesn't care about folder beauty.\n3. **Forcing adoption**: People need to see value before they'll use new tools\n\n## Setting It Up for Your Projects\n\nWant to try this yourself? Here's my recommended approach:\n\n### Quick Start (5 minutes)\n\n",
          "line_count": 56,
          "start_pos": 5947,
          "end_pos": 10069
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 56 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "plain",
          "code": "\n## Real-World Impact: The Numbers\n\nSince implementing this system (with all its rough edges):\n\n- **Setup time**: 2 hours \u2192 15 minutes for new projects\n- **Consistency**: Same patterns across all my projects (when the template is correct)\n- **Token usage**: Down roughly 85% on average (I measured 5,000+ tokens \u2192 ~750 tokens for typical contexts)\n- **Validation time**: 147 seconds \u2192 12 seconds (with 15% memory cost)\n- **False positive rate**: 88% \u2192 4% (after 3 days of tuning)\n- **Initial violations found**: 87 across 23 files\n- **Hours spent fixing violations**: 4.5 hours\n- **Template propagation errors**: 6 issues from bad template\n- **CLAUDE.md growth**: 120 lines \u2192 2,847 lines over 6 months\n- **Section 4 rewrites**: 12 iterations (probably more than necessary)\n- **Commits rejected by hooks**: 3 that I thought were fine\n- **Full portfolio scan time**: 34 minutes\n\nThe benefits are real **but** the system requires ongoing maintenance. Standards reduce errors **however** they add workflow complexity. I've found the trade-off acceptable for my projects, though your mileage may vary.\n\n## Tips for Claude CLI Power Users\n\n### 1. Create Project-Specific Standards\n\n",
          "line_count": 22,
          "start_pos": 10808,
          "end_pos": 11991
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Exploring Claude CLI Context and Compliance with My Standards Repository - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Exploring Claude CLI Context and Compliance with My Standards Repository - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Exploring Claude CLI Context and Compliance with My Standards Repository - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-06-25-local-llm-deployment-privacy-first.md",
    "title": "Local LLM Deployment: Privacy-First Approach",
    "metrics": {
      "total_lines": 418,
      "code_lines": 154,
      "code_blocks": 14,
      "code_ratio": 36.8,
      "text_lines": 264
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Hardware\"\n        GPU[GPU/TPU]\n        CPU[CPU]\n        RAM[Memory]\n    end\n    \n    subgraph \"Model Layer\"\n        Models[(Model Files)]\n        Weights[Weights]\n        Config[Configuration]\n    end\n    \n    subgraph \"Inference\"\n        Engine[Inference Engine]\n        Cache[Token Cache]\n        Batch[Batch Processing]\n    end\n    \n    subgraph \"Interface\"\n        API[REST API]\n        UI[Web UI]\n        CLI[CLI Tool]\n    end\n    \n    GPU --> Engine\n    CPU --> Engine\n    RAM --> Cache\n    \n    Models --> Engine\n    Weights --> Engine\n    Config --> Engine\n    \n    Engine --> Cache\n    Engine --> Batch\n    \n    Batch --> API\n    API --> UI\n    API --> CLI\n    \n    style GPU fill:#ff9800\n    style Engine fill:#4caf50\n    style API fill:#2196f3\n",
          "line_count": 43,
          "start_pos": 670,
          "end_pos": 1462
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 43 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "Primary LLM Server:\n  GPU: NVIDIA RTX 4090 (24GB VRAM)\n  CPU: AMD Ryzen 9 7950X\n  RAM: 64GB DDR5\n  Storage: 2TB NVMe SSD\n  OS: Ubuntu 22.04 LTS\n\nSecondary Node (CPU Inference):\n  CPU: Intel i9-13900K\n  RAM: 128GB DDR5\n  Storage: 1TB NVMe SSD\n  Purpose: Smaller models and overflow\n",
          "line_count": 12,
          "start_pos": 2961,
          "end_pos": 3253
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Clone and build\ngit clone [https://github.com/ggerganov/llama.cpp](https://github.com/ggerganov/llama.cpp)\ncd llama.cpp\nmake -j $(nproc)\n\n# For CUDA support\nmake LLAMA_CUDA=1 -j $(nproc)\n\n# Download and convert model\npython3 convert.py /path/to/model --outtype f16\n\n# Run inference\n./main -m models/llama-2-7b.gguf -p \"Your prompt here\" -n 512\n",
          "line_count": 13,
          "start_pos": 4002,
          "end_pos": 4359
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Local LLM Deployment: Privacy-First Approach - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Local LLM Deployment: Privacy-First Approach - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Local LLM Deployment: Privacy-First Approach - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Local LLM Deployment: Privacy-First Approach - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-02-10-automating-home-network-security.md",
    "title": "Automating Home Network Security with Python and Open Source Tools",
    "metrics": {
      "total_lines": 233,
      "code_lines": 85,
      "code_blocks": 9,
      "code_ratio": 36.5,
      "text_lines": 148
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "bash",
          "code": "pip install collections email ipaddress nmap requests smtplib sqlite3 subprocess vulners\n",
          "line_count": 1,
          "start_pos": 323,
          "end_pos": 423
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "text",
          "code": "collections\nemail\nipaddress\nnmap\nrequests\nsmtplib\nsqlite3\nsubprocess\nvulners\n",
          "line_count": 9,
          "start_pos": 463,
          "end_pos": 551
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 1225,
          "end_pos": 1777
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "import subprocess\nimport ipaddress\nfrom datetime import datetime, timedelta\n\nclass DynamicFirewall:\n    # ... (additional implementation details)\n            # Update pfBlockerNG lists\n            self.update_pf_blocker_list(country_code)\n",
          "line_count": 8,
          "start_pos": 3714,
          "end_pos": 3966
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Automating Home Network Security with Python and Open Source Tools - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Automating Home Network Security with Python and Open Source Tools - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-09-20-vulnerability-prioritization-epss-kev.md",
    "title": "Building a Smart Vulnerability Prioritization System with EPSS and CISA KEV",
    "metrics": {
      "total_lines": 247,
      "code_lines": 85,
      "code_blocks": 5,
      "code_ratio": 34.4,
      "text_lines": 162
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "python",
          "code": "import asyncio\nimport aiohttp\nfrom datetime import datetime, timedelta\n\nclass VulnerabilityAggregator:\n    def __init__(self):\n        self.nvd_base = \"[https://services.nvd.nist.gov/rest/json/cves/2.0](https://services.nvd.nist.gov/rest/json/cves/2.0)\"\n        self.epss_base = \"[https://api.first.org/data/v1/epss](https://api.first.org/data/v1/epss)\"\n        self.kev_url = \"[https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json](https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json)\"\n\n    async def get_recent_cves(self, days_back=7):\n        \"\"\"Fetch CVEs published in the last N days\"\"\"\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=days_back)\n\n        params = {\n            'pubStartDate': start_date.isoformat(),\n            'pubEndDate': end_date.isoformat()\n        }\n\n        async with aiohttp.ClientSession() as session:\n            async with session.get(self.nvd_base, params=params) as resp:\n                return await resp.json()\n",
          "line_count": 23,
          "start_pos": 4887,
          "end_pos": 5947
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 4 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "def calculate_priority_score(cve_data, epss_score, is_kev, asset_criticality):\n    \"\"\"\n    Combine multiple factors into a single priority score.\n\n    Based on research showing EPSS + contextual factors outperform\n    CVSS-only approaches by 3x in catching real exploits.\n    \"\"\"\n    base_score = 0.0\n\n    # EPSS is our primary predictor (40% weight)\n    base_score += epss_score * 40\n\n    # KEV membership is definitive (30% weight)\n    if is_kev:\n        base_score += 30\n\n    # CVSS for severity context (20% weight)\n    cvss_score = cve_data.get('cvss_v3', 0) / 10\n    base_score += cvss_score * 20\n\n    # Asset criticality multiplier (10% weight)\n    criticality_multiplier = {\n        'critical': 1.0,\n        'high': 0.7,\n        'medium': 0.4,\n        'low': 0.1\n    }\n    base_score += criticality_multiplier.get(asset_criticality, 0.5) * 10\n\n    return min(base_score, 100)  # Cap at 100\n",
          "line_count": 30,
          "start_pos": 6254,
          "end_pos": 7165
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 6 similar lines that could be condensed",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "python",
          "code": "async def fetch_with_retry(session, url, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            async with session.get(url) as response:\n                if response.status == 429:  # Rate limited\n                    wait_time = 2 ** attempt\n                    await asyncio.sleep(wait_time)\n                    continue\n                return await response.json()\n        except Exception as e:\n            if attempt == max_retries - 1:\n                raise\n            await asyncio.sleep(1)\n",
          "line_count": 13,
          "start_pos": 7699,
          "end_pos": 8234
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Building a Smart Vulnerability Prioritization System with EPSS and CISA KEV - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Building a Smart Vulnerability Prioritization System with EPSS and CISA KEV - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-03-10-raspberry-pi-security-projects.md",
    "title": "Raspberry Pi Security Projects That Actually Solve Problems",
    "metrics": {
      "total_lines": 253,
      "code_lines": 86,
      "code_blocks": 9,
      "code_ratio": 34.0,
      "text_lines": 167
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 283,
          "end_pos": 835
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Install Pi-hole\ncurl -sSL [https://install.pi-hole.net](https://install.pi-hole.net) | bash\n\n# Add custom blocklists for security\ncd /etc/pihole\nsudo wget [https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/malware.txt](https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/malware.txt)\nsudo wget [https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/ransomware.txt](https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/ransomware.txt)\nsudo wget [https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/phishing.txt](https://raw.githubusercontent.com/RPiList/specials/master/Blocklists/phishing.txt)\n\n# Update gravity database\npihole -g\n",
          "line_count": 11,
          "start_pos": 2080,
          "end_pos": 2808
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "network",
        "title": "Raspberry Pi Security Projects That Actually Solve Problems - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2025-08-09-ai-cognitive-infrastructure.md",
    "title": "AI as Cognitive Infrastructure: The Invisible Architecture Reshaping Human Thought",
    "metrics": {
      "total_lines": 337,
      "code_lines": 87,
      "code_blocks": 3,
      "code_ratio": 25.8,
      "text_lines": 250
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Traditional Infrastructure\"\n        Roads[Physical Roads]\n        Power[Electricity Grid]\n        Telecom[Telecommunications]\n    end\n\n    subgraph \"Cognitive Infrastructure\"\n        AI[AI Systems]\n        ML[Machine Learning]\n        NLP[Natural Language Processing]\n    end\n\n    subgraph \"Human Cognition\"\n        Memory[Memory]\n        Decision[Decision Making]\n        Analysis[Analysis]\n        Creativity[Creativity]\n    end\n\n    Roads --> Commerce[Enable Commerce]\n    Power --> Industry[Power Industry]\n    Telecom --> Communication[Enable Communication]\n\n    AI --> Memory\n    ML --> Decision\n    NLP --> Analysis\n    AI --> Creativity\n\n    Memory --> Thinking[Augmented Thinking]\n    Decision --> Thinking\n    Analysis --> Thinking\n    Creativity --> Thinking\n\n    style AI fill:#e11d48\n    style ML fill:#e11d48\n    style NLP fill:#e11d48\n    style Thinking fill:#10b981\n",
          "line_count": 38,
          "start_pos": 1097,
          "end_pos": 2016
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 38 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "AI as Cognitive Infrastructure: The Invisible Architecture Reshaping Human Thought - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "AI as Cognitive Infrastructure: The Invisible Architecture Reshaping Human Thought - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "AI as Cognitive Infrastructure: The Invisible Architecture Reshaping Human Thought - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "sequence",
        "title": "AI as Cognitive Infrastructure: The Invisible Architecture Reshaping Human Thought - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "medium"
  },
  {
    "file": "2024-10-10-blockchain-beyond-cryptocurrency.md",
    "title": "Blockchain Beyond Cryptocurrency: Building the Trust Layer of the Internet",
    "metrics": {
      "total_lines": 281,
      "code_lines": 68,
      "code_blocks": 3,
      "code_ratio": 24.2,
      "text_lines": 213
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TD\n    subgraph \"Network Layer\"\n        P2P[P2P Network]\n        Gossip[Gossip Protocol]\n    end\n\n    subgraph \"Consensus\"\n        Mining[Mining/Validation]\n        Consensus[Consensus Algorithm]\n    end\n\n    subgraph \"Data Layer\"\n        Blocks[Blocks]\n        Chain[Blockchain]\n        State[State Tree]\n    end\n\n    subgraph \"Application\"\n        Smart[Smart Contracts]\n        DApp[DApps]\n    end\n\n    P2P --> Gossip\n    Gossip --> Mining\n    Mining --> Consensus\n    Consensus --> Blocks\n    Blocks --> Chain\n    Chain --> State\n    State --> Smart\n    Smart --> DApp\n\n    style Consensus fill:#ff9800\n    style Smart fill:#9c27b0\n",
          "line_count": 33,
          "start_pos": 1666,
          "end_pos": 2322
        },
        "suggestions": [
          {
            "type": "split",
            "reason": "Code block has 33 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "javascript",
          "code": "// Simplified supply chain tracking smart contract\ncontract SupplyChainTracker {\n    struct Product {\n        uint256 id;\n        string description;\n        address currentOwner;\n        uint256 timestamp;\n    }\n\n    mapping(uint256 => Product[]) public productHistory;\n\n    function transferOwnership(uint256 productId) public {\n        // Record transfers immutably\n        productHistory[productId].push(Product({\n            id: productId,\n            description: \"Transferred\",\n            currentOwner: msg.sender,\n            timestamp: block.timestamp\n        }));\n    }\n}\n",
          "line_count": 21,
          "start_pos": 5273,
          "end_pos": 5873
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "javascript",
          "code": "// Simplified content rights tracking\ncontract ContentRights {\n    struct Rights {\n        address creator;\n        string contentHash;  // IPFS hash\n        uint256 creationDate;\n        mapping(address => uint256) royaltyShares;\n    }\n\n    function registerContent(string memory ipfsHash) public {\n        // Timestamp proof of creation\n        // Manage royalty distributions automatically\n    }\n}\n",
          "line_count": 14,
          "start_pos": 10146,
          "end_pos": 10564
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Blockchain Beyond Cryptocurrency: Building the Trust Layer of the Internet - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Blockchain Beyond Cryptocurrency: Building the Trust Layer of the Internet - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Blockchain Beyond Cryptocurrency: Building the Trust Layer of the Internet - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Blockchain Beyond Cryptocurrency: Building the Trust Layer of the Internet - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-04-19-mastering-prompt-engineering-llms.md",
    "title": "Mastering Prompt Engineering: Unlocking the Full Potential of LLMs",
    "metrics": {
      "total_lines": 305,
      "code_lines": 68,
      "code_blocks": 5,
      "code_ratio": 22.3,
      "text_lines": 237
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1058,
          "end_pos": 1679
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Mastering Prompt Engineering: Unlocking the Full Potential of LLMs - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Mastering Prompt Engineering: Unlocking the Full Potential of LLMs - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "sequence",
        "title": "Mastering Prompt Engineering: Unlocking the Full Potential of LLMs - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-08-27-zero-trust-security-principles.md",
    "title": "Implementing Zero Trust Security: Never Trust, Always Verify",
    "metrics": {
      "total_lines": 506,
      "code_lines": 113,
      "code_blocks": 7,
      "code_ratio": 22.3,
      "text_lines": 393
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Identity & Access\"\n        User[Users]\n        Device[Devices]\n        Apps[Applications]\n    end\n    \n    subgraph \"Policy Engine\"\n        PEP[Policy Enforcement]\n        PDP[Policy Decision]\n        Trust[Trust Engine]\n    end\n    \n    subgraph \"Verification\"\n        MFA[Multi-Factor Auth]\n        Risk[Risk Assessment]\n        Context[Context Analysis]\n    end\n    \n    subgraph \"Resources\"\n        Data[(Data)]\n        Services[Services]\n        Network[Network]\n    end\n    \n    User --> PEP\n    Device --> PEP\n    Apps --> PEP\n    \n    PEP --> PDP\n    PDP --> Trust\n    \n    Trust --> MFA\n    Trust --> Risk\n    Trust --> Context\n    \n    MFA --> PDP\n    Risk --> PDP\n    Context --> PDP\n    \n    PDP -->|Allow/Deny| Data\n    PDP -->|Allow/Deny| Services\n    PDP -->|Allow/Deny| Network\n    \n    style PEP fill:#ff5252\n    style Trust fill:#ff9800\n    style PDP fill:#4caf50\n",
          "line_count": 47,
          "start_pos": 1528,
          "end_pos": 2447
        },
        "suggestions": [
          {
            "type": "split",
            "reason": "Code block has 47 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "flowchart TD\n    Start([Access Request]) --> Identity[Verify Identity]\n    Identity --> Device[Verify Device]\n    Device --> Context[Check Context]\n    Context --> Risk[Assess Risk]\n    \n    Risk --> Level{Risk Level?}\n    Level -->|High| Deny[Deny Access]\n    Level -->|Medium| MFA[Require MFA]\n    Level -->|Low| Policy[Check Policies]\n    \n    MFA --> Valid{Valid?}\n    Valid -->|No| Deny\n    Valid -->|Yes| Policy\n    \n    Policy --> Pass{Pass?}\n    Pass -->|No| Deny\n    Pass -->|Yes| Grant[Grant Access]\n    \n    Grant --> Monitor[Monitor Session]\n    Monitor --> Anomaly{Anomaly?}\n    Anomaly -->|Yes| Revoke[Revoke Access]\n    Anomaly -->|No| Monitor\n    \n    style Deny fill:#f44336\n    style Grant fill:#4caf50\n    style Monitor fill:#2196f3\n",
          "line_count": 27,
          "start_pos": 3908,
          "end_pos": 4674
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Example GitLab CI with security scanning and verification\nstages:\n  - build\n  - test  \n  - security\n    # ... (additional implementation details)\n  only:\n    - main\n",
          "line_count": 8,
          "start_pos": 17161,
          "end_pos": 17339
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Implementing Zero Trust Security: Never Trust, Always Verify - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Implementing Zero Trust Security: Never Trust, Always Verify - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Implementing Zero Trust Security: Never Trust, Always Verify - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Implementing Zero Trust Security: Never Trust, Always Verify - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Implementing Zero Trust Security: Never Trust, Always Verify - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-10-29-post-quantum-cryptography-homelab.md",
    "title": "Preparing Your Homelab for the Quantum Future: Post-Quantum Cryptography Migration",
    "metrics": {
      "total_lines": 528,
      "code_lines": 113,
      "code_blocks": 9,
      "code_ratio": 21.4,
      "text_lines": 415
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "bash",
          "code": "# Install dependencies\nsudo apt-get update\nsudo apt-get install build-essential cmake git libssl-dev\n\n# Build liboqs from source\ngit clone https://github.com/open-quantum-safe/liboqs.git\ncd liboqs\nmkdir build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON ..\nmake -j$(nproc)\nsudo make install\nsudo ldconfig\n\n# Build oqs-provider for OpenSSL 3\ncd ../..\ngit clone https://github.com/open-quantum-safe/oqs-provider.git\ncd oqs-provider\nmkdir build && cd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake -j$(nproc)\nsudo make install\n",
          "line_count": 21,
          "start_pos": 13746,
          "end_pos": 14304
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "nginx",
          "code": "# /etc/nginx/nginx.conf\nhttp {\n    ssl_protocols TLSv1.3;\n    # Hybrid algorithms: PQ + classical fallback\n    ssl_ecdh_curve x25519_kyber768:p384_kyber768:x25519:secp384r1;\n\n    server {\n        listen 443 ssl;\n        server_name lab.example.com;\n\n        ssl_certificate /path/to/cert.pem;\n        ssl_certificate_key /path/to/key.pem;\n\n        # Prevent certificate chain fragmentation issues\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        location / {\n            proxy_pass http://localhost:8080;\n        }\n    }\n}\n",
          "line_count": 22,
          "start_pos": 15368,
          "end_pos": 15938
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Spin up Ubuntu 24.04 VM in Proxmox\n# 2 CPU cores, 4GB RAM is plenty\n\n# Install Caddy 2.10 (the easy button)\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n\n# Create test configuration\nsudo tee /etc/caddy/Caddyfile <<EOF\ntest.yourdomain.com {\n    reverse_proxy localhost:8080\n    # PQC enabled by default, no config needed\n}\nEOF\n\n# Start a simple test backend\npython3 -m http.server 8080 &\n\n# Restart Caddy\nsudo systemctl restart caddy\n\n# Test from another machine\nopenssl s_client -connect test.yourdomain.com:443 -groups x25519_kyber768\n",
          "line_count": 25,
          "start_pos": 23965,
          "end_pos": 24777
        },
        "suggestions": [
          {
            "type": "condense",
            "reason": "Code has 5 similar lines that could be condensed",
            "priority": "medium"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# Set up monitoring for TLS handshake times\n# I use Prometheus + Grafana with ssl_exporter\n\n# Watch for:\n# - Handshake latency spikes (>50ms is suspicious)\n# - Connection failures (incompatible clients)\n# - Certificate expiration (PQC or not, certs still expire)\n\n# Test regularly with different clients:\n# - Modern browser (Chrome 124+, Firefox 128+)\n# - Mobile devices (iOS 17.4+, Android 14+)\n# - IoT devices (many don't support PQC yet)\n# - API clients (curl, Python requests, etc.)\n",
          "line_count": 13,
          "start_pos": 27278,
          "end_pos": 27776
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Preparing Your Homelab for the Quantum Future: Post-Quantum Cryptography Migration - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Preparing Your Homelab for the Quantum Future: Post-Quantum Cryptography Migration - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Preparing Your Homelab for the Quantum Future: Post-Quantum Cryptography Migration - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-02-24-continuous-learning-cybersecurity.md",
    "title": "Continuous Learning in Cybersecurity: Strategies That Work",
    "metrics": {
      "total_lines": 411,
      "code_lines": 84,
      "code_blocks": 7,
      "code_ratio": 20.4,
      "text_lines": 327
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 302,
          "end_pos": 854
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "Production_Like_Environment:\n  - Domain: homelab.local (Active Directory)\n  - Network_Segments:\n    - DMZ: Public-facing services\n    - Internal: \"Corporate\" network\n  - Hardware:\n    - RAM: 64GB DDR4\n    - Storage: 2TB NVMe\n    # ... (additional implementation details)\n      - Network: Dream Machine Professional + Suricata\n      - Deception: Honeypots\n",
          "line_count": 11,
          "start_pos": 1998,
          "end_pos": 2364
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Large configuration block could be visualized as a diagram",
            "diagram_type": "architecture",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "plain",
          "code": "Broad Knowledge (1 inch deep):\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\nCloud | AI/ML | Compliance | DevOps | Privacy\n\nDeep Expertise (1 mile deep):\n        \u2503\n    Detection\n    Engineering\n        \u2503\n    Incident\n    Response\n        \u2503\n    Network\n    Security\n",
          "line_count": 14,
          "start_pos": 7339,
          "end_pos": 7610
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "network",
        "title": "Continuous Learning in Cybersecurity: Strategies That Work - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-09-09-embodied-ai-teaching-agents.md",
    "title": "Teaching AI Agents to Ask for Help: A Breakthrough in Human-Robot Interaction",
    "metrics": {
      "total_lines": 193,
      "code_lines": 39,
      "code_blocks": 2,
      "code_ratio": 20.2,
      "text_lines": 154
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1298,
          "end_pos": 1919
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Teaching AI Agents to Ask for Help: A Breakthrough in Human-Robot Interaction - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Teaching AI Agents to Ask for Help: A Breakthrough in Human-Robot Interaction - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Teaching AI Agents to Ask for Help: A Breakthrough in Human-Robot Interaction - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Teaching AI Agents to Ask for Help: A Breakthrough in Human-Robot Interaction - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-10-17-progressive-context-loading-llm-workflows.md",
    "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows",
    "metrics": {
      "total_lines": 489,
      "code_lines": 99,
      "code_blocks": 11,
      "code_ratio": 20.2,
      "text_lines": 390
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "markdown",
          "code": "## File Validation Routing\n\n| File Pattern | Primary Skills | Optional Skills |\n|-------------|----------------|-----------------|\n| `*.py` | python/code-quality, python/type-safety | python/performance |\n| `*.md` | markdown/formatting, markdown/links | markdown/readability |\n| `.github/workflows/*.yml` | github/actions, yaml/validation | security/secrets |\n",
          "line_count": 7,
          "start_pos": 6220,
          "end_pos": 6595
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    A[Task Arrives] --> B{Parse File Types}\n    B --> C[Query Product Matrix]\n    C --> D{Determine Skills}\n    D --> E[Load Primary Skills 2K tokens]\n    E --> F{Task Complete?}\n    F -->|Yes| G[Return Result]\n    F -->|No| H{Need More Context?}\n    H -->|Yes| I[Load Dependencies +3K tokens]\n    I --> F\n    H -->|No| J[Request Clarification]\n\n    style E fill:#51cf66\n    style I fill:#ffd93d\n    style J fill:#6bcfff\n",
          "line_count": 15,
          "start_pos": 6813,
          "end_pos": 7257
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "mkdir -p skills/{enforcement,reference,workflow}\ncat > skills/enforcement/python/code-quality.md << 'EOF'\n---\nskill_id: python.code_quality\ntriggers: [\"*.py\"]\ntoken_budget: 1847\n---\n# Python Code Quality Standards\n[content]\nEOF\n",
          "line_count": 10,
          "start_pos": 18614,
          "end_pos": 18853
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "From 150K to 2K Tokens: How Progressive Context Loading Revolutionizes LLM Development Workflows - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-01-08-writing-secure-code-developers-guide.md",
    "title": "Writing Secure Code: A Developer's Guide to Thwarting Security Exploits",
    "metrics": {
      "total_lines": 134,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 20.1,
      "text_lines": 107
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 718,
          "end_pos": 1270
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Writing Secure Code: A Developer's Guide to Thwarting Security Exploits - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Writing Secure Code: A Developer's Guide to Thwarting Security Exploits - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Writing Secure Code: A Developer's Guide to Thwarting Security Exploits - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-04-24-building-secure-homelab-adventure.md",
    "title": "Building a Security-Focused Homelab: My Journey",
    "metrics": {
      "total_lines": 173,
      "code_lines": 32,
      "code_blocks": 2,
      "code_ratio": 18.5,
      "text_lines": 141
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 377,
          "end_pos": 929
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Building a Security-Focused Homelab: My Journey - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Building a Security-Focused Homelab: My Journey - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Building a Security-Focused Homelab: My Journey - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-11-05-pizza-calculator.md",
    "title": "The Pizza Calculator: Optimizing Team Fuel for Critical Development Sprints",
    "metrics": {
      "total_lines": 245,
      "code_lines": 45,
      "code_blocks": 2,
      "code_ratio": 18.4,
      "text_lines": 200
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Frontend\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n    \n    subgraph \"Application\"\n        API[API Gateway]\n        Services[Microservices]\n        Cache[Redis Cache]\n    end\n    \n    subgraph \"Data\"\n        DB[(Database)]\n        S3[Object Storage]\n        Queue[Message Queue]\n    end\n    \n    CDN --> LB\n    LB --> API\n    API --> Services\n    Services --> Cache\n    Services --> DB\n    Services --> Queue\n    \n    style API fill:#2196f3\n    style Services fill:#4caf50\n    style DB fill:#ff9800\n",
          "line_count": 28,
          "start_pos": 1606,
          "end_pos": 2152
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "The Pizza Calculator: Optimizing Team Fuel for Critical Development Sprints - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "The Pizza Calculator: Optimizing Team Fuel for Critical Development Sprints - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "The Pizza Calculator: Optimizing Team Fuel for Critical Development Sprints - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-01-30-securing-cloud-native-frontier.md",
    "title": "Securing the Cloud-Native Frontier: A Guide to Cloud-Native Security",
    "metrics": {
      "total_lines": 149,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 18.1,
      "text_lines": 122
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 1325,
          "end_pos": 1877
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Securing the Cloud-Native Frontier: A Guide to Cloud-Native Security - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Securing the Cloud-Native Frontier: A Guide to Cloud-Native Security - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Securing the Cloud-Native Frontier: A Guide to Cloud-Native Security - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Securing the Cloud-Native Frontier: A Guide to Cloud-Native Security - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-02-09-deepfake-dilemma-ai-deception.md",
    "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception",
    "metrics": {
      "total_lines": 168,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 17.9,
      "text_lines": 138
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1192,
          "end_pos": 1813
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "The Deepfake Dilemma: Navigating the Threat of AI-Generated Deception - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-10-03-quantum-computing-defense.md",
    "title": "Quantum Computing and Defense: The Double-Edged Sword of Tomorrow's Technology",
    "metrics": {
      "total_lines": 259,
      "code_lines": 45,
      "code_blocks": 3,
      "code_ratio": 17.4,
      "text_lines": 214
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Initialization\"\n        Q0[Qubit 0: Zero State]\n        Q1[Qubit 1: Zero State]\n    end\n    \n    subgraph \"Quantum Gates\"\n        H[Hadamard Gate]\n        CNOT[CNOT Gate]\n        M[Measurement]\n    end\n    \n    subgraph \"Classical Output\"\n        C0[Classical Bit 0]\n        C1[Classical Bit 1]\n    end\n    \n    Q0 --> H\n    H --> CNOT\n    Q1 --> CNOT\n    CNOT --> M\n    M --> C0\n    M --> C1\n    \n    style H fill:#2196f3\n    style CNOT fill:#9c27b0\n    style M fill:#4caf50\n",
          "line_count": 27,
          "start_pos": 965,
          "end_pos": 1478
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Quantum Computing and Defense: The Double-Edged Sword of Tomorrow's Technology - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Quantum Computing and Defense: The Double-Edged Sword of Tomorrow's Technology - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Quantum Computing and Defense: The Double-Edged Sword of Tomorrow's Technology - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Quantum Computing and Defense: The Double-Edged Sword of Tomorrow's Technology - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-07-15-vulnerability-management-scale-open-source.md",
    "title": "Vulnerability Management at Scale with Open Source Tools",
    "metrics": {
      "total_lines": 333,
      "code_lines": 55,
      "code_blocks": 2,
      "code_ratio": 16.5,
      "text_lines": 278
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Data Collection\"\n        NVD[NVD Database]\n        CVE[CVE/MITRE]\n        GitHub[GitHub Advisory]\n        OSV[OSV Database][9]\n    end\n    \n    subgraph \"Processing Pipeline\"\n        Collect[Data Collector]\n        Parse[CVE Parser]\n        Enrich[Data Enricher]\n        Score[Risk Scorer]\n    end\n    \n    subgraph \"Storage & Analysis\"\n        DB[(PostgreSQL)]\n        Cache[(Redis Cache)]\n        ML[ML Analysis]\n    end\n    \n    subgraph \"Output\"\n        API[REST API]\n        Dashboard[Dashboard]\n        Alerts[Alert System]\n    end\n    \n    NVD --> Collect\n    CVE --> Collect\n    GitHub --> Collect\n    OSV --> Collect\n    \n    Collect --> Parse\n    Parse --> Enrich\n    Enrich --> Score\n    \n    Score --> DB\n    Score --> Cache\n    DB --> ML\n    \n    ML --> API\n    ML --> Dashboard\n    ML --> Alerts\n    \n    style Collect fill:#4caf50\n    style Score fill:#ff9800\n    style Alerts fill:#f44336\n",
          "line_count": 47,
          "start_pos": 1980,
          "end_pos": 2922
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          },
          {
            "type": "split",
            "reason": "Code block has 47 lines - consider splitting or extracting key parts",
            "priority": "high"
          }
        ]
      },
      {
        "block": {
          "language": "yaml",
          "code": "# Apache Airflow DAG for automated vulnerability management\nfrom airflow import DAG\nfrom airflow.operators.python_operator import PythonOperator\nfrom airflow.operators.bash_operator import BashOperator\nfrom datetime import datetime, timedelta\n    # ... (additional implementation details)\n# Define workflow\nasset_discovery >> vulnerability_scan >> create_remediations >> auto_remediate >> generate_reports\n",
          "line_count": 8,
          "start_pos": 10579,
          "end_pos": 10996
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Vulnerability Management at Scale with Open Source Tools - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Vulnerability Management at Scale with Open Source Tools - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Vulnerability Management at Scale with Open Source Tools - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Vulnerability Management at Scale with Open Source Tools - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-10-13-embodied-ai-robots-physical-world.md",
    "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution",
    "metrics": {
      "total_lines": 290,
      "code_lines": 47,
      "code_blocks": 3,
      "code_ratio": 16.2,
      "text_lines": 243
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Traditional AI Agents\"\n        A[Text Input] --> B[Language Model]\n        B --> C[Text Output]\n    end\n\n    subgraph \"Vision-Language-Action Models\"\n        D[Visual Input] --> E[VLA Model]\n        F[Language Input] --> E\n        E --> G[Physical Actions]\n        G --> H[Robot Control]\n    end\n\n    C -.evolves into.-> E\n\n    style E fill:#e11d48\n    style H fill:#10b981\n",
          "line_count": 17,
          "start_pos": 1567,
          "end_pos": 1978
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "bash",
          "code": "# ROS2 Humble installation (Ubuntu 22.04)\nsudo apt install ros-humble-desktop-full\n\n# Install OpenVLA frameworks\ngit clone https://github.com/google-deepmind/open_x_embodiment\npip install -r requirements.txt\n\n# Camera drivers\nsudo apt install ros-humble-realsense2-camera\n\n# Motion planning\nsudo apt install ros-humble-moveit\n",
          "line_count": 12,
          "start_pos": 5068,
          "end_pos": 5405
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      },
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Safety Layers\"\n        A[VLA Model] --> B[Action Filter]\n        B --> C[Collision Detection]\n        C --> D[Force Limits]\n        D --> E[Emergency Stop]\n        E --> F[Physical Robot]\n    end\n\n    G[Safety Monitor] --> B\n    G --> C\n    G --> D\n\n    H[Human Supervisor] --> E\n\n    style A fill:#3b82f6\n    style E fill:#ef4444\n    style G fill:#f59e0b\n",
          "line_count": 18,
          "start_pos": 6605,
          "end_pos": 6998
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "From Claude in Your Terminal to Robots in Your Workshop: The Embodied AI Revolution - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-03-05-cloud-migration-journey-guide.md",
    "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud",
    "metrics": {
      "total_lines": 176,
      "code_lines": 28,
      "code_blocks": 1,
      "code_ratio": 15.9,
      "text_lines": 148
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Frontend\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n    \n    subgraph \"Application\"\n        API[API Gateway]\n        Services[Microservices]\n        Cache[Redis Cache]\n    end\n    \n    subgraph \"Data\"\n        DB[(Database)]\n        S3[Object Storage]\n        Queue[Message Queue]\n    end\n    \n    CDN --> LB\n    LB --> API\n    API --> Services\n    Services --> Cache\n    Services --> DB\n    Services --> Queue\n    \n    style API fill:#2196f3\n    style Services fill:#4caf50\n    style DB fill:#ff9800\n",
          "line_count": 28,
          "start_pos": 691,
          "end_pos": 1237
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Cloud Migration: A Guide to Navigating Your Journey to the Cloud - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-07-29-building-mcp-standards-server.md",
    "title": "Down the MCP Rabbit Hole: Building a Standards Server",
    "metrics": {
      "total_lines": 377,
      "code_lines": 55,
      "code_blocks": 8,
      "code_ratio": 14.6,
      "text_lines": 322
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "bash",
          "code": "# The optimistic quick start\npip install mcp-standards-server\nmcp-standards serve --stdio\n\n# The realistic setup\ngit clone [https://github.com/williamzujkowski/mcp-standards-server.git](https://github.com/williamzujkowski/mcp-standards-server.git)\ncd mcp-standards-server\npython -m venv venv && source venv/bin/activate\npip install -e .\n# Fix 17 dependency conflicts\n# Install Redis\n# Sacrifice a keyboard to the demo gods\npython -m src\n",
          "line_count": 13,
          "start_pos": 12450,
          "end_pos": 12898
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Down the MCP Rabbit Hole: Building a Standards Server - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "sequence",
        "title": "Down the MCP Rabbit Hole: Building a Standards Server - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-02-22-open-source-vs-proprietary-llms.md",
    "title": "Open-Source vs. Proprietary LLMs: A Battle of Accessibility, Customization, and Community",
    "metrics": {
      "total_lines": 210,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 14.3,
      "text_lines": 180
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 975,
          "end_pos": 1596
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Open-Source vs. Proprietary LLMs: A Battle of Accessibility, Customization, and Community - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Open-Source vs. Proprietary LLMs: A Battle of Accessibility, Customization, and Community - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Open-Source vs. Proprietary LLMs: A Battle of Accessibility, Customization, and Community - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Open-Source vs. Proprietary LLMs: A Battle of Accessibility, Customization, and Community - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-03-24-from-it-support-to-senior-infosec-engineer.md",
    "title": "From IT Support to Senior InfoSec Engineer: My 15+ Year Journey",
    "metrics": {
      "total_lines": 196,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 13.8,
      "text_lines": 169
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 741,
          "end_pos": 1293
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "From IT Support to Senior InfoSec Engineer: My 15+ Year Journey - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "From IT Support to Senior InfoSec Engineer: My 15+ Year Journey - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "From IT Support to Senior InfoSec Engineer: My 15+ Year Journey - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "From IT Support to Senior InfoSec Engineer: My 15+ Year Journey - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-03-20-transformer-architecture-deep-dive.md",
    "title": "The Transformer Architecture: A Deep Dive",
    "metrics": {
      "total_lines": 218,
      "code_lines": 28,
      "code_blocks": 1,
      "code_ratio": 12.8,
      "text_lines": 190
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "The Transformer Architecture: A Deep Dive - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "The Transformer Architecture: A Deep Dive - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "The Transformer Architecture: A Deep Dive - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "The Transformer Architecture: A Deep Dive - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "The Transformer Architecture: A Deep Dive - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-04-11-ethics-large-language-models.md",
    "title": "The Ethics of Large Language Models",
    "metrics": {
      "total_lines": 247,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 12.1,
      "text_lines": 217
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 546,
          "end_pos": 1167
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "The Ethics of Large Language Models - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "sequence",
        "title": "The Ethics of Large Language Models - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-04-04-retrieval-augmented-generation-rag.md",
    "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge",
    "metrics": {
      "total_lines": 271,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 11.1,
      "text_lines": 241
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n\n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n\n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n\n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n\n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 632,
          "end_pos": 1237
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Retrieval Augmented Generation (RAG): Enhancing LLMs with External Knowledge - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-10-22-ai-edge-computing.md",
    "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence",
    "metrics": {
      "total_lines": 278,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 10.8,
      "text_lines": 248
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1584,
          "end_pos": 2205
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "AI Meets Edge Computing: Transforming Real-Time Intelligence - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-11-19-llms-smart-contract-vulnerability.md",
    "title": "Large Language Models for Smart Contract Security: Promise and Limitations",
    "metrics": {
      "total_lines": 250,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 10.8,
      "text_lines": 223
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 1324,
          "end_pos": 1876
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Large Language Models for Smart Contract Security: Promise and Limitations - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Large Language Models for Smart Contract Security: Promise and Limitations - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Large Language Models for Smart Contract Security: Promise and Limitations - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Large Language Models for Smart Contract Security: Promise and Limitations - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-04-30-quantum-resistant-cryptography-guide.md",
    "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography",
    "metrics": {
      "total_lines": 259,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 10.4,
      "text_lines": 232
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Threat Actors\"\n        TA1[External Attackers]\n        TA2[Insider Threats]\n        TA3[Supply Chain]\n    end\n    \n    subgraph \"Attack Vectors\"\n        AV1[Network]\n        AV2[Application]\n        AV3[Physical]\n    end\n    \n    subgraph \"Defenses\"\n        D1[Prevention]\n        D2[Detection]\n        D3[Response]\n    end\n    \n    TA1 & TA2 & TA3 --> AV1 & AV2 & AV3\n    AV1 & AV2 & AV3 --> D1\n    D1 -->|Bypass| D2\n    D2 --> D3\n    \n    style D1 fill:#4caf50\n    style D2 fill:#ff9800\n    style D3 fill:#f44336\n",
          "line_count": 27,
          "start_pos": 657,
          "end_pos": 1209
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Preparing for the Quantum Leap: A Guide to Quantum-Resistant Cryptography - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-12-03-context-windows-llms.md",
    "title": "Context Windows in Large Language Models: The Memory That Shapes AI",
    "metrics": {
      "total_lines": 288,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 10.4,
      "text_lines": 258
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1386,
          "end_pos": 2007
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Context Windows in Large Language Models: The Memory That Shapes AI - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Context Windows in Large Language Models: The Memory That Shapes AI - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Context Windows in Large Language Models: The Memory That Shapes AI - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Context Windows in Large Language Models: The Memory That Shapes AI - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Context Windows in Large Language Models: The Memory That Shapes AI - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-07-24-multimodal-foundation-models.md",
    "title": "Multimodal Foundation Models: Capabilities, Challenges, and Applications",
    "metrics": {
      "total_lines": 290,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 10.3,
      "text_lines": 260
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 671,
          "end_pos": 1292
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Multimodal Foundation Models: Capabilities, Challenges, and Applications - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Multimodal Foundation Models: Capabilities, Challenges, and Applications - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Multimodal Foundation Models: Capabilities, Challenges, and Applications - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "sequence",
        "title": "Multimodal Foundation Models: Capabilities, Challenges, and Applications - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-10-29-privacy-first-ai-lab-local-llms.md",
    "title": "Building a Privacy-First AI Lab: Deploying Local LLMs Without Sacrificing Ethics",
    "metrics": {
      "total_lines": 461,
      "code_lines": 42,
      "code_blocks": 7,
      "code_ratio": 9.1,
      "text_lines": 419
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "plain",
          "code": "# Block all outbound by default\nDENY * -> ANY (internet)\n\n# Allow DNS for model downloads\nALLOW 10.0.20.0/24 -> 10.0.1.1 (DNS)\n\n# Allow HTTPS for initial model downloads only\nALLOW 10.0.20.0/24 -> ANY:443 (temporary, disabled after setup)\n\n# Allow internal metrics collection\nALLOW 10.0.20.0/24 -> 10.0.30.5:9090 (Prometheus)\n",
          "line_count": 11,
          "start_pos": 11584,
          "end_pos": 11917
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Building a Privacy-First AI Lab: Deploying Local LLMs Without Sacrificing Ethics - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Building a Privacy-First AI Lab: Deploying Local LLMs Without Sacrificing Ethics - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "network",
        "title": "Building a Privacy-First AI Lab: Deploying Local LLMs Without Sacrificing Ethics - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-08-13-high-performance-computing.md",
    "title": "The Evolution of High-Performance Computing: Key Trends and Innovations",
    "metrics": {
      "total_lines": 361,
      "code_lines": 32,
      "code_blocks": 3,
      "code_ratio": 8.9,
      "text_lines": 329
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "The Evolution of High-Performance Computing: Key Trends and Innovations - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "The Evolution of High-Performance Computing: Key Trends and Innovations - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "The Evolution of High-Performance Computing: Key Trends and Innovations - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "The Evolution of High-Performance Computing: Key Trends and Innovations - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "The Evolution of High-Performance Computing: Key Trends and Innovations - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2025-05-10-llm-fine-tuning-homelab-guide.md",
    "title": "Fine-Tuning LLMs in the Homelab: A Practical Guide",
    "metrics": {
      "total_lines": 342,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 8.8,
      "text_lines": 312
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n\n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n\n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n\n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n\n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 562,
          "end_pos": 1167
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Fine-Tuning LLMs in the Homelab: A Practical Guide - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Fine-Tuning LLMs in the Homelab: A Practical Guide - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "sequence",
        "title": "Fine-Tuning LLMs in the Homelab: A Practical Guide - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-05-14-ai-new-frontier-cybersecurity.md",
    "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas",
    "metrics": {
      "total_lines": 345,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 8.7,
      "text_lines": 315
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1495,
          "end_pos": 2116
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "AI: The New Frontier in Cybersecurity \u2013 Opportunities and Ethical Dilemmas - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-08-02-quantum-computing-leap-forward.md",
    "title": "Quantum Computing's Leap Forward",
    "metrics": {
      "total_lines": 363,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 7.4,
      "text_lines": 336
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Initialization\"\n        Q0[Qubit 0: Zero State]\n        Q1[Qubit 1: Zero State]\n    end\n    \n    subgraph \"Quantum Gates\"\n        H[Hadamard Gate]\n        CNOT[CNOT Gate]\n        M[Measurement]\n    end\n    \n    subgraph \"Classical Output\"\n        C0[Classical Bit 0]\n        C1[Classical Bit 1]\n    end\n    \n    Q0 --> H\n    H --> CNOT\n    Q1 --> CNOT\n    CNOT --> M\n    M --> C0\n    M --> C1\n    \n    style H fill:#2196f3\n    style CNOT fill:#9c27b0\n    style M fill:#4caf50\n",
          "line_count": 27,
          "start_pos": 1027,
          "end_pos": 1540
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Quantum Computing's Leap Forward - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Quantum Computing's Leap Forward - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Quantum Computing's Leap Forward - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Quantum Computing's Leap Forward - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-06-11-beyond-containers-future-deployment.md",
    "title": "Beyond Containers: The Future of Application Deployment",
    "metrics": {
      "total_lines": 417,
      "code_lines": 28,
      "code_blocks": 1,
      "code_ratio": 6.7,
      "text_lines": 389
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TB\n    subgraph \"Frontend\"\n        CDN[CDN]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Application\"\n        API[API Gateway]\n        Services[Microservices]\n        Cache[Redis Cache]\n    end\n\n    subgraph \"Data\"\n        DB[(Database)]\n        S3[Object Storage]\n        Queue[Message Queue]\n    end\n\n    CDN --> LB\n    LB --> API\n    API --> Services\n    Services --> Cache\n    Services --> DB\n    Services --> Queue\n\n    style API fill:#2196f3\n    style Services fill:#4caf50\n    style DB fill:#ff9800\n",
          "line_count": 28,
          "start_pos": 2129,
          "end_pos": 2659
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Beyond Containers: The Future of Application Deployment - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Beyond Containers: The Future of Application Deployment - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Beyond Containers: The Future of Application Deployment - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Beyond Containers: The Future of Application Deployment - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Beyond Containers: The Future of Application Deployment - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-07-09-zero-trust-architecture-implementation.md",
    "title": "Zero Trust Architecture: A Practical Implementation Guide",
    "metrics": {
      "total_lines": 642,
      "code_lines": 27,
      "code_blocks": 1,
      "code_ratio": 4.2,
      "text_lines": 615
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph TD\n    subgraph \"Perimeter\"\n        FW[Firewall]\n        WAF[WAF]\n        IDS[IDS/IPS]\n    end\n    \n    subgraph \"Network\"\n        VLAN[Segmentation]\n        NAC[Access Control]\n    end\n    \n    subgraph \"Endpoint\"\n        EDR[EDR]\n        AV[Antivirus]\n        DLP[DLP]\n    end\n    \n    Internet --> FW\n    FW --> WAF\n    WAF --> IDS\n    IDS --> VLAN\n    VLAN --> NAC\n    NAC --> EDR\n    \n    style FW fill:#2196f3\n    style EDR fill:#4caf50\n",
          "line_count": 27,
          "start_pos": 1150,
          "end_pos": 1613
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "API interactions could be shown as a sequence diagram",
            "diagram_type": "sequence",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Zero Trust Architecture: A Practical Implementation Guide - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Zero Trust Architecture: A Practical Implementation Guide - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Zero Trust Architecture: A Practical Implementation Guide - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Zero Trust Architecture: A Practical Implementation Guide - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Zero Trust Architecture: A Practical Implementation Guide - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-05-30-ai-learning-resource-constrained.md",
    "title": "AI Learning in Resource-Constrained Environments",
    "metrics": {
      "total_lines": 1214,
      "code_lines": 30,
      "code_blocks": 1,
      "code_ratio": 2.5,
      "text_lines": 1184
    },
    "code_block_analysis": [
      {
        "block": {
          "language": "mermaid",
          "code": "graph LR\n    subgraph \"Data Pipeline\"\n        Raw[Raw Data]\n        Clean[Cleaning]\n        Feature[Feature Engineering]\n    end\n    \n    subgraph \"Model Training\"\n        Train[Training]\n        Val[Validation]\n        Test[Testing]\n    end\n    \n    subgraph \"Deployment\"\n        Deploy[Model Deployment]\n        Monitor[Monitoring]\n        Update[Updates]\n    end\n    \n    Raw --> Clean\n    Clean --> Feature\n    Feature --> Train\n    Train --> Val\n    Val --> Test\n    Test --> Deploy\n    Deploy --> Monitor\n    Monitor -->|Feedback| Train\n    \n    style Train fill:#9c27b0\n    style Deploy fill:#4caf50\n",
          "line_count": 30,
          "start_pos": 1497,
          "end_pos": 2118
        },
        "suggestions": [
          {
            "type": "diagram",
            "reason": "Workflow/pipeline code could be shown as a flowchart",
            "diagram_type": "flowchart",
            "priority": "high"
          },
          {
            "type": "diagram",
            "reason": "Data structures could be shown as a class/ER diagram",
            "diagram_type": "class_diagram",
            "priority": "medium"
          }
        ]
      }
    ],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "AI Learning in Resource-Constrained Environments - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "AI Learning in Resource-Constrained Environments - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "AI Learning in Resource-Constrained Environments - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "AI Learning in Resource-Constrained Environments - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "AI Learning in Resource-Constrained Environments - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-01-18-demystifying-cryptography-beginners-guide.md",
    "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures",
    "metrics": {
      "total_lines": 329,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 329
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Demystifying Cryptography: A Beginner's Guide to Encryption, Hashing, and Digital Signatures - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-06-25-designing-resilient-systems.md",
    "title": "Designing Resilient Systems for an Uncertain World",
    "metrics": {
      "total_lines": 957,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 957
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Designing Resilient Systems for an Uncertain World - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Designing Resilient Systems for an Uncertain World - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Designing Resilient Systems for an Uncertain World - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Designing Resilient Systems for an Uncertain World - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Designing Resilient Systems for an Uncertain World - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-07-16-sustainable-computing-carbon-footprint.md",
    "title": "Sustainable Computing: Strategies for Reducing IT's Carbon Footprint",
    "metrics": {
      "total_lines": 433,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 433
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Sustainable Computing: Strategies for Reducing IT's Carbon Footprint - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Sustainable Computing: Strategies for Reducing IT's Carbon Footprint - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Sustainable Computing: Strategies for Reducing IT's Carbon Footprint - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Sustainable Computing: Strategies for Reducing IT's Carbon Footprint - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-09-19-biomimetic-robotics.md",
    "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering",
    "metrics": {
      "total_lines": 271,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 271
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "architecture",
        "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering - System Architecture",
        "description": "High-level system architecture showing components and their relationships",
        "tool": "mermaid or draw.io"
      },
      {
        "type": "flowchart",
        "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      },
      {
        "type": "sequence",
        "title": "Learning from Nature: How Biomimetic Robotics is Revolutionizing Engineering - Sequence Diagram",
        "description": "Sequence diagram showing interactions over time",
        "tool": "mermaid sequence diagram"
      }
    ],
    "priority": "low"
  },
  {
    "file": "2024-11-15-gpu-power-monitoring-homelab-ml.md",
    "title": "GPU Power Monitoring in My Homelab: When Machine Learning Met My Electricity Bill",
    "metrics": {
      "total_lines": 271,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 271
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "GPU Power Monitoring in My Homelab: When Machine Learning Met My Electricity Bill - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      },
      {
        "type": "dataflow",
        "title": "GPU Power Monitoring in My Homelab: When Machine Learning Met My Electricity Bill - Data Flow",
        "description": "Data flow diagram showing how data moves through the system",
        "tool": "mermaid or lucidchart"
      },
      {
        "type": "network",
        "title": "GPU Power Monitoring in My Homelab: When Machine Learning Met My Electricity Bill - Network Topology",
        "description": "Network diagram showing connections and topology",
        "tool": "draw.io or mermaid"
      }
    ],
    "priority": "low"
  },
  {
    "file": "welcome.md",
    "title": "Building My Digital Garden with Eleventy",
    "metrics": {
      "total_lines": 67,
      "code_lines": 0,
      "code_blocks": 0,
      "code_ratio": 0.0,
      "text_lines": 67
    },
    "code_block_analysis": [],
    "diagram_suggestions": [
      {
        "type": "flowchart",
        "title": "Building My Digital Garden with Eleventy - Process Flow",
        "description": "Visual workflow showing the process steps and decision points",
        "tool": "mermaid flowchart"
      }
    ],
    "priority": "low"
  }
]
---
title: "Blog Statistics"
layout: base
permalink: /stats/
description: "Comprehensive statistics and visualizations for williamzujkowski.github.io blog posts"
eleventyNavigation:
  key: Stats
  order: 5
eleventyComputed:
  stats: "{{ blogStats }}"
---

<div class="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <!-- Header -->
  <header class="max-w-4xl mx-auto text-center mb-12">
    <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-gray-100 mb-4">
      Blog Statistics
    </h1>
    <p class="text-xl text-gray-600 dark:text-gray-400">
      A comprehensive look at content trends, topics, and publishing patterns
    </p>
  </header>

  <!-- Year Selector -->
  <section aria-label="Year filter navigation">
    <nav class="max-w-6xl mx-auto mb-8">
    <div class="flex justify-center items-center gap-4 flex-wrap">
      <button
        class="year-tab px-6 py-3 min-h-[44px] rounded-lg font-medium transition-all duration-200 bg-primary-600 text-white shadow-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        data-year="all"
        onclick="switchYear('all')"
        aria-label="Show statistics for all years"
        aria-pressed="true"
        role="button"
      >
        All Time
      </button>
      <button
        class="year-tab px-6 py-3 min-h-[44px] rounded-lg font-medium transition-all duration-200 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        data-year="2024"
        onclick="switchYear('2024')"
        aria-label="Show statistics for 2024"
        aria-pressed="false"
        role="button"
      >
        2024
      </button>
      <button
        class="year-tab px-6 py-3 min-h-[44px] rounded-lg font-medium transition-all duration-200 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        data-year="2025"
        onclick="switchYear('2025')"
        aria-label="Show statistics for 2025"
        aria-pressed="false"
        role="button"
      >
        2025
      </button>
    </div>
    </nav>
  </section>

  <!-- Summary Stats Cards -->
  <section aria-labelledby="overview-heading" aria-live="polite">
    <h2 id="overview-heading" class="sr-only">Statistics Overview</h2>
    <div class="max-w-6xl mx-auto mb-12">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <!-- Total Posts Card -->
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Total Posts</h3>
          <svg class="w-8 h-8 text-primary-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
        </div>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100 animate-counter" data-stat="total-posts">
          {{ collections.posts.length }}
        </p>
      </div>

      <!-- Total Words Card -->
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in" style="animation-delay: 100ms">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Total Words</h3>
          <svg class="w-8 h-8 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
          </svg>
        </div>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100 animate-counter" data-stat="total-words">
          {% set totalWords = 0 %}
          {% for post in collections.posts %}
            {% set wordCount = (post.templateContent | striptags | split(' ') | length) %}
            {% set totalWords = totalWords + wordCount %}
          {% endfor %}
          {{ totalWords | toLocaleString }}
        </p>
      </div>

      <!-- Unique Tags Card -->
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in" style="animation-delay: 200ms">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Unique Tags</h3>
          <svg class="w-8 h-8 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
        </div>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100 animate-counter" data-stat="unique-tags">
          {% set allTags = [] %}
          {% for post in collections.posts %}
            {% for tag in post.data.tags %}
              {% if tag != "posts" %}
                {% set allTags = (allTags.push(tag), allTags) %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ allTags | unique | length }}
        </p>
      </div>

      <!-- Avg Reading Time Card -->
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in" style="animation-delay: 300ms">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Avg Reading</h3>
          <svg class="w-8 h-8 text-orange-500" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100 animate-counter" data-stat="avg-reading">
          {% set totalReadingTime = 0 %}
          {% for post in collections.posts %}
            {% set readingTime = post.templateContent | readingTime %}
            {% set totalReadingTime = totalReadingTime + readingTime %}
          {% endfor %}
          {{ (totalReadingTime / collections.posts.length) | round }}m
        </p>
      </div>
    </div>
  </section>

  <!-- Writing Streaks Section -->
  <section aria-labelledby="streaks-heading" class="max-w-6xl mx-auto mb-12">
    <h2 id="streaks-heading" class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Writing Streaks</h2>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Longest Streak</h3>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100" data-stat="longest-streak">0</p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">consecutive months</p>
      </div>
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in" style="animation-delay: 100ms">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Current Streak</h3>
        <p class="text-4xl font-bold text-gray-900 dark:text-gray-100" data-stat="current-streak">0</p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">consecutive months</p>
      </div>
      <div class="glass-card p-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 fade-in" style="animation-delay: 200ms">
        <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Most Productive</h3>
        <p class="text-2xl font-bold text-gray-900 dark:text-gray-100" data-stat="most-productive-month">-</p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mt-1" data-stat="most-productive-count">0 posts</p>
      </div>
    </div>
  </section>

  <!-- Charts Section -->
  <section aria-labelledby="charts-heading">
    <h2 id="charts-heading" class="sr-only">Data Visualizations</h2>
    <div class="max-w-6xl mx-auto space-y-12">

    <!-- Posts Over Time Chart -->
    <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Posts Over Time</h2>
      <div class="h-80 px-2">
        <canvas id="postsOverTimeChart" aria-label="Line chart showing blog posts published over time" role="img"></canvas>
      </div>
      <!-- Data table fallback for screen readers -->
      <table class="sr-only" role="table" aria-label="Posts over time data">
        <caption>Blog posts published per month</caption>
        <thead>
          <tr><th>Month</th><th>Posts</th></tr>
        </thead>
        <tbody id="postsOverTimeTable"></tbody>
      </table>
    </div>

    <!-- Two Column Layout: Charts -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">

      <!-- Top Tags Chart -->
      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Top Tags</h2>
        <div class="h-80 px-2">
          <canvas id="topTagsChart" aria-label="Bar chart showing most frequently used blog post tags" role="img"></canvas>
        </div>
        <!-- Data table fallback for screen readers -->
        <table class="sr-only" role="table" aria-label="Top tags data">
          <caption>Most frequently used tags</caption>
          <thead>
            <tr><th>Tag</th><th>Count</th></tr>
          </thead>
          <tbody id="topTagsTable"></tbody>
        </table>
      </div>

      <!-- Day of Week Analysis -->
      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Publishing by Day of Week</h2>
        <div class="h-80 px-2">
          <canvas id="dayOfWeekChart" aria-label="Radar chart showing publishing patterns by day of week" role="img"></canvas>
        </div>
        <!-- Data table fallback for screen readers -->
        <table class="sr-only" role="table" aria-label="Day of week data">
          <caption>Posts published by day of week</caption>
          <thead>
            <tr><th>Day</th><th>Posts</th></tr>
          </thead>
          <tbody id="dayOfWeekTable"></tbody>
        </table>
      </div>
    </div>

    <!-- Two Column Layout: Text Statistics -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Citation Statistics</h2>
        <div class="space-y-6">
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Total External Links</h3>
            <p class="text-4xl font-bold text-indigo-600 dark:text-indigo-400">{{ blogStats.citation_stats.total_external_links }}</p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">across all posts</p>
          </div>
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Average Citations per Post</h3>
            <p class="text-4xl font-bold text-indigo-600 dark:text-indigo-400">{{ blogStats.citation_stats.average_external_links_per_post }}</p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">external references</p>
          </div>
          <div>
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Citation Density</h3>
            <p class="text-4xl font-bold text-indigo-600 dark:text-indigo-400">{{ blogStats.citation_stats.average_citation_density }}</p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">citations per 1,000 words</p>
          </div>
        </div>
      </div>

      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Code Statistics</h2>
        <div class="space-y-6">
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Average Code-to-Content Ratio</h3>
            <p class="text-4xl font-bold text-purple-600 dark:text-purple-400">{{ blogStats.code_stats.average_code_to_content_ratio }}%</p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">of content is code blocks</p>
          </div>
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Posts with Code</h3>
            <p class="text-4xl font-bold text-purple-600 dark:text-purple-400">{{ blogStats.code_stats.posts_with_code }}</p>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">of {{ blogStats.total_posts }} posts ({{ blogStats.code_stats.posts_with_code_percentage }}%)</p>
          </div>
          <div>
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Technical Content Focus</h3>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-4 mt-2">
              <div class="bg-purple-600 dark:bg-purple-400 h-4 rounded-full transition-all duration-500" style="width: {{ blogStats.code_stats.posts_with_code_percentage }}%"></div>
            </div>
            <p class="text-sm text-gray-500 dark:text-gray-400 mt-1">posts include code examples</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Reading Time Distribution and Enhanced Insights -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Reading Time Distribution</h2>
        <div class="h-80 px-4">
          <canvas id="readingTimeChart" aria-label="Doughnut chart showing distribution of reading times across blog posts" role="img"></canvas>
        </div>
        <!-- Data table fallback for screen readers -->
        <table class="sr-only" role="table" aria-label="Reading time distribution data">
          <caption>Distribution of reading times</caption>
          <thead>
            <tr><th>Range</th><th>Posts</th></tr>
          </thead>
          <tbody id="readingTimeTable"></tbody>
        </table>
      </div>

      <!-- Enhanced Reading Time Insights -->
      <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Reading Time Insights</h2>
        <div class="space-y-4">
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Median Reading Time</h3>
            <p class="text-3xl font-bold text-gray-900 dark:text-gray-100" data-stat="median-reading">-</p>
          </div>
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">25th Percentile</h3>
            <p class="text-2xl font-bold text-gray-900 dark:text-gray-100" data-stat="percentile-25">-</p>
          </div>
          <div class="border-b border-gray-200 dark:border-gray-700 pb-4">
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">75th Percentile</h3>
            <p class="text-2xl font-bold text-gray-900 dark:text-gray-100" data-stat="percentile-75">-</p>
          </div>
          <div>
            <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider mb-2">Longest Post</h3>
            <p class="text-2xl font-bold text-gray-900 dark:text-gray-100" data-stat="longest-post">-</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Publishing Activity Heatmap -->
    <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Publishing Activity Heatmap</h2>
      <div class="overflow-x-auto" style="padding-top: 48px;">
        <div id="publishingHeatmap" class="min-w-fit" role="region" aria-label="Publishing activity heatmap">
          <!-- Heatmap will be generated here -->
        </div>
      </div>
      <!-- Color Legend (dynamically updated based on theme) -->
      <div id="heatmapLegend" class="mt-6 flex items-center justify-center gap-2" role="img" aria-label="Heatmap color legend">
        <!-- Legend will be generated dynamically -->
      </div>
    </div>

    <!-- Tag Cloud -->
    <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Tag Cloud</h2>
      <div id="tagCloud" class="flex flex-wrap gap-3 justify-center min-h-[200px]" role="list" aria-label="Tag cloud">
        <!-- Tag cloud will be generated here -->
      </div>
    </div>

    <!-- Topic Evolution Timeline -->
    <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Topic Evolution Over Time</h2>
      <div class="h-96 px-2">
        <canvas id="topicEvolutionChart" aria-label="Line chart showing evolution of top 5 tags over time" role="img"></canvas>
      </div>
      <!-- Data table fallback for screen readers -->
      <table class="sr-only" role="table" aria-label="Topic evolution data">
        <caption>Top 5 tags usage over time</caption>
        <thead>
          <tr><th>Tag</th><th>Month</th><th>Count</th></tr>
        </thead>
        <tbody id="topicEvolutionTable"></tbody>
      </table>
    </div>

    <!-- Word Count Analysis -->
    <div class="glass-card p-8 rounded-xl shadow-lg fade-in">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">Word Count Analysis</h2>
      <div class="h-80 px-2">
        <canvas id="wordCountChart" aria-label="Bar chart showing word count distribution across blog posts" role="img"></canvas>
      </div>
      <!-- Data table fallback for screen readers -->
      <table class="sr-only" role="table" aria-label="Word count distribution data">
        <caption>Distribution of word counts</caption>
        <thead>
          <tr><th>Range</th><th>Posts</th></tr>
        </thead>
        <tbody id="wordCountTable"></tbody>
      </table>
    </div>

    </div>
  </section>
</div>

<!-- Chart.js Library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>

<!-- Stats Data and Visualization Script -->
<script>
// Prepare blog post data
const blogPosts = [
  {% for post in collections.posts %}
  {
    title: {{ post.data.title | dump | safe }},
    date: "{{ post.date | htmlDateString }}",
    tags: {{ post.data.tags | dump | safe }},
    wordCount: {{ (post.templateContent | striptags | split(' ') | length) }},
    readingTime: {{ post.templateContent | readingTime }}
  }{% if not loop.last %},{% endif %}
  {% endfor %}
];

let currentYear = 'all';
let charts = {};

// Get filtered posts based on selected year
function getFilteredPosts() {
  if (currentYear === 'all') {
    return blogPosts;
  }
  return blogPosts.filter(post => post.date.startsWith(currentYear));
}

// Switch year filter
function switchYear(year) {
  currentYear = year;

  // Update tab styles and ARIA attributes
  document.querySelectorAll('.year-tab').forEach(tab => {
    if (tab.dataset.year === year) {
      tab.className = 'year-tab px-6 py-3 min-h-[44px] rounded-lg font-medium transition-all duration-200 bg-primary-600 text-white shadow-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900';
      tab.setAttribute('aria-pressed', 'true');
    } else {
      tab.className = 'year-tab px-6 py-3 min-h-[44px] rounded-lg font-medium transition-all duration-200 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900';
      tab.setAttribute('aria-pressed', 'false');
    }
  });

  // Update all visualizations
  updateStats();
  updateCharts();
  updateHeatmap();
  updateTagCloud();
  updateStreaks();
  updateReadingTimeInsights();
}

// Calculate writing streaks
function calculateStreaks(posts) {
  if (posts.length === 0) {
    return { longest: 0, current: 0, mostProductiveMonth: '-', mostProductiveCount: 0 };
  }

  // Group posts by month
  const monthCounts = {};
  posts.forEach(post => {
    const month = post.date.substring(0, 7); // YYYY-MM
    monthCounts[month] = (monthCounts[month] || 0) + 1;
  });

  const sortedMonths = Object.keys(monthCounts).sort();

  // Calculate longest streak
  let longestStreak = 1;
  let currentStreak = 1;

  for (let i = 1; i < sortedMonths.length; i++) {
    const prevDate = new Date(sortedMonths[i - 1] + '-01');
    const currDate = new Date(sortedMonths[i] + '-01');

    // Check if consecutive months
    const monthsDiff = (currDate.getFullYear() - prevDate.getFullYear()) * 12 +
                       (currDate.getMonth() - prevDate.getMonth());

    if (monthsDiff === 1) {
      currentStreak++;
      longestStreak = Math.max(longestStreak, currentStreak);
    } else {
      currentStreak = 1;
    }
  }

  // Calculate current streak from most recent month
  const now = new Date();
  const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
  const lastMonth = sortedMonths[sortedMonths.length - 1];

  currentStreak = 1;
  if (lastMonth === currentMonth || lastMonth === getCurrentOrPreviousMonth()) {
    for (let i = sortedMonths.length - 2; i >= 0; i--) {
      const prevDate = new Date(sortedMonths[i] + '-01');
      const currDate = new Date(sortedMonths[i + 1] + '-01');
      const monthsDiff = (currDate.getFullYear() - prevDate.getFullYear()) * 12 +
                         (currDate.getMonth() - prevDate.getMonth());

      if (monthsDiff === 1) {
        currentStreak++;
      } else {
        break;
      }
    }
  } else {
    currentStreak = 0;
  }

  // Find most productive month
  let mostProductiveMonth = '-';
  let mostProductiveCount = 0;
  Object.entries(monthCounts).forEach(([month, count]) => {
    if (count > mostProductiveCount) {
      mostProductiveCount = count;
      mostProductiveMonth = month;
    }
  });

  // Format most productive month
  if (mostProductiveMonth !== '-') {
    const date = new Date(mostProductiveMonth + '-01');
    mostProductiveMonth = date.toLocaleDateString('en-US', { year: 'numeric', month: 'long' });
  }

  return {
    longest: longestStreak,
    current: currentStreak,
    mostProductiveMonth,
    mostProductiveCount
  };
}

// Helper function to get current or previous month
function getCurrentOrPreviousMonth() {
  const now = new Date();
  const prevMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
  return `${prevMonth.getFullYear()}-${String(prevMonth.getMonth() + 1).padStart(2, '0')}`;
}

// Update streak statistics
function updateStreaks() {
  const posts = getFilteredPosts();
  const streaks = calculateStreaks(posts);

  document.querySelector('[data-stat="longest-streak"]').textContent = streaks.longest;
  document.querySelector('[data-stat="current-streak"]').textContent = streaks.current;
  document.querySelector('[data-stat="most-productive-month"]').textContent = streaks.mostProductiveMonth;
  document.querySelector('[data-stat="most-productive-count"]').textContent =
    `${streaks.mostProductiveCount} post${streaks.mostProductiveCount !== 1 ? 's' : ''}`;
}

// Calculate percentile
function percentile(arr, p) {
  if (arr.length === 0) return 0;
  const sorted = [...arr].sort((a, b) => a - b);
  const index = (p / 100) * (sorted.length - 1);
  const lower = Math.floor(index);
  const upper = Math.ceil(index);
  const weight = index - lower;
  return sorted[lower] * (1 - weight) + sorted[upper] * weight;
}

// Update reading time insights
function updateReadingTimeInsights() {
  const posts = getFilteredPosts();
  if (posts.length === 0) {
    document.querySelector('[data-stat="median-reading"]').textContent = '-';
    document.querySelector('[data-stat="percentile-25"]').textContent = '-';
    document.querySelector('[data-stat="percentile-75"]').textContent = '-';
    document.querySelector('[data-stat="longest-post"]').textContent = '-';
    return;
  }

  const readingTimes = posts.map(p => p.readingTime);
  const median = Math.round(percentile(readingTimes, 50));
  const p25 = Math.round(percentile(readingTimes, 25));
  const p75 = Math.round(percentile(readingTimes, 75));
  const longest = Math.max(...readingTimes);

  document.querySelector('[data-stat="median-reading"]').textContent = `${median}m`;
  document.querySelector('[data-stat="percentile-25"]').textContent = `${p25}m`;
  document.querySelector('[data-stat="percentile-75"]').textContent = `${p75}m`;
  document.querySelector('[data-stat="longest-post"]').textContent = `${longest}m`;
}

// Update summary statistics
function updateStats() {
  const posts = getFilteredPosts();

  // Total posts
  document.querySelector('[data-stat="total-posts"]').textContent = posts.length;

  // Total words
  const totalWords = posts.reduce((sum, post) => sum + post.wordCount, 0);
  document.querySelector('[data-stat="total-words"]').textContent = totalWords.toLocaleString();

  // Unique tags
  const allTags = posts.flatMap(post => post.tags.filter(tag => tag !== 'posts'));
  const uniqueTags = [...new Set(allTags)];
  document.querySelector('[data-stat="unique-tags"]').textContent = uniqueTags.length;

  // Average reading time
  const avgReading = posts.length > 0
    ? posts.reduce((sum, post) => sum + post.readingTime, 0) / posts.length
    : 0;
  document.querySelector('[data-stat="avg-reading"]').textContent = Math.round(avgReading) + 'm';
}

// Update all charts
function updateCharts() {
  const posts = getFilteredPosts();

  // Destroy existing charts
  Object.values(charts).forEach(chart => {
    if (chart) chart.destroy();
  });
  charts = {};

  // Get theme colors
  const isDark = document.documentElement.classList.contains('dark');
  const textColor = isDark ? '#e5e7eb' : '#374151';
  const gridColor = isDark ? '#374151' : '#e5e7eb';

  // Posts Over Time Chart
  const monthCounts = {};
  posts.forEach(post => {
    const month = post.date.substring(0, 7); // YYYY-MM
    monthCounts[month] = (monthCounts[month] || 0) + 1;
  });

  const sortedMonths = Object.keys(monthCounts).sort();

  // Update data table for screen readers
  const postsOverTimeTable = document.getElementById('postsOverTimeTable');
  postsOverTimeTable.innerHTML = sortedMonths.map(month =>
    `<tr><td>${month}</td><td>${monthCounts[month]}</td></tr>`
  ).join('');

  charts.postsOverTime = new Chart(document.getElementById('postsOverTimeChart'), {
    type: 'line',
    data: {
      labels: sortedMonths,
      datasets: [{
        label: 'Posts Published',
        data: sortedMonths.map(month => monthCounts[month]),
        borderColor: '#6366f1',
        backgroundColor: 'rgba(99, 102, 241, 0.1)',
        fill: true,
        tension: 0.4
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { labels: { color: textColor } },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      },
      scales: {
        x: {
          ticks: { color: textColor },
          grid: { color: gridColor }
        },
        y: {
          ticks: { color: textColor, stepSize: 1 },
          grid: { color: gridColor }
        }
      }
    }
  });

  // Top Tags Chart
  const tagCounts = {};
  posts.forEach(post => {
    post.tags.filter(tag => tag !== 'posts').forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  });

  const topTags = Object.entries(tagCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);

  // Update data table for screen readers
  const topTagsTable = document.getElementById('topTagsTable');
  topTagsTable.innerHTML = topTags.map(([tag, count]) =>
    `<tr><td>${tag}</td><td>${count}</td></tr>`
  ).join('');

  charts.topTags = new Chart(document.getElementById('topTagsChart'), {
    type: 'bar',
    data: {
      labels: topTags.map(([tag]) => tag),
      datasets: [{
        label: 'Post Count',
        data: topTags.map(([, count]) => count),
        backgroundColor: [
          '#6366f1', '#8b5cf6', '#ec4899', '#f59e0b',
          '#10b981', '#3b82f6', '#ef4444', '#14b8a6',
          '#f97316', '#84cc16'
        ]
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { display: false },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      },
      scales: {
        x: {
          ticks: { color: textColor },
          grid: { display: false }
        },
        y: {
          ticks: { color: textColor, stepSize: 1 },
          grid: { color: gridColor }
        }
      }
    }
  });

  // Day of Week Analysis (NEW)
  const dayOfWeekCounts = {
    'Sunday': 0, 'Monday': 0, 'Tuesday': 0, 'Wednesday': 0,
    'Thursday': 0, 'Friday': 0, 'Saturday': 0
  };
  const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

  posts.forEach(post => {
    const date = new Date(post.date);
    const dayName = dayNames[date.getDay()];
    dayOfWeekCounts[dayName]++;
  });

  // Update data table for screen readers
  const dayOfWeekTable = document.getElementById('dayOfWeekTable');
  dayOfWeekTable.innerHTML = Object.entries(dayOfWeekCounts).map(([day, count]) =>
    `<tr><td>${day}</td><td>${count}</td></tr>`
  ).join('');

  charts.dayOfWeek = new Chart(document.getElementById('dayOfWeekChart'), {
    type: 'radar',
    data: {
      labels: dayNames,
      datasets: [{
        label: 'Posts Published',
        data: dayNames.map(day => dayOfWeekCounts[day]),
        borderColor: '#6366f1',
        backgroundColor: isDark ? 'rgba(99, 102, 241, 0.2)' : 'rgba(99, 102, 241, 0.1)',
        pointBackgroundColor: '#6366f1',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: '#6366f1'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { labels: { color: textColor } },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      },
      scales: {
        r: {
          ticks: {
            color: textColor,
            stepSize: 1,
            backdropColor: 'transparent'
          },
          grid: { color: gridColor },
          pointLabels: { color: textColor }
        }
      }
    }
  });

  // Topic Evolution Chart (NEW)
  const top5Tags = topTags.slice(0, 5).map(([tag]) => tag);
  const tagByMonth = {};

  posts.forEach(post => {
    const month = post.date.substring(0, 7);
    if (!tagByMonth[month]) tagByMonth[month] = {};

    post.tags.filter(tag => top5Tags.includes(tag)).forEach(tag => {
      tagByMonth[month][tag] = (tagByMonth[month][tag] || 0) + 1;
    });
  });

  const allMonths = Object.keys(tagByMonth).sort();
  const colors = ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981'];

  // Update data table for screen readers
  const topicEvolutionTable = document.getElementById('topicEvolutionTable');
  topicEvolutionTable.innerHTML = top5Tags.flatMap(tag =>
    allMonths.map(month =>
      `<tr><td>${tag}</td><td>${month}</td><td>${tagByMonth[month][tag] || 0}</td></tr>`
    )
  ).join('');

  charts.topicEvolution = new Chart(document.getElementById('topicEvolutionChart'), {
    type: 'line',
    data: {
      labels: allMonths,
      datasets: top5Tags.map((tag, idx) => ({
        label: tag,
        data: allMonths.map(month => tagByMonth[month][tag] || 0),
        borderColor: colors[idx],
        backgroundColor: colors[idx] + '20',
        fill: false,
        tension: 0.4
      }))
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          labels: { color: textColor },
          position: 'top'
        },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      },
      scales: {
        x: {
          ticks: { color: textColor },
          grid: { color: gridColor }
        },
        y: {
          ticks: { color: textColor, stepSize: 1 },
          grid: { color: gridColor }
        }
      }
    }
  });

  // Reading Time Distribution (using pre-calculated data from stats generator)
  const readingTimeBuckets = {{ blogStats.reading_time_distribution | dump | safe }};

  // Update data table for screen readers
  const readingTimeTable = document.getElementById('readingTimeTable');
  readingTimeTable.innerHTML = Object.entries(readingTimeBuckets).map(([range, count]) =>
    `<tr><td>${range}</td><td>${count}</td></tr>`
  ).join('');

  charts.readingTime = new Chart(document.getElementById('readingTimeChart'), {
    type: 'doughnut',
    data: {
      labels: Object.keys(readingTimeBuckets),
      datasets: [{
        data: Object.values(readingTimeBuckets),
        backgroundColor: ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b'],
        borderColor: isDark ? '#1f2937' : '#ffffff',
        borderWidth: 2
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: { color: textColor }
        },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      }
    }
  });

  // Word Count Chart
  const wordCountBuckets = { '0-1000': 0, '1001-2000': 0, '2001-3000': 0, '3001-4000': 0, '4000+': 0 };
  posts.forEach(post => {
    const words = post.wordCount;
    if (words <= 1000) wordCountBuckets['0-1000']++;
    else if (words <= 2000) wordCountBuckets['1001-2000']++;
    else if (words <= 3000) wordCountBuckets['2001-3000']++;
    else if (words <= 4000) wordCountBuckets['3001-4000']++;
    else wordCountBuckets['4000+']++;
  });

  // Update data table for screen readers
  const wordCountTable = document.getElementById('wordCountTable');
  wordCountTable.innerHTML = Object.entries(wordCountBuckets).map(([range, count]) =>
    `<tr><td>${range} words</td><td>${count}</td></tr>`
  ).join('');

  charts.wordCount = new Chart(document.getElementById('wordCountChart'), {
    type: 'bar',
    data: {
      labels: Object.keys(wordCountBuckets).map(label => label + ' words'),
      datasets: [{
        label: 'Number of Posts',
        data: Object.values(wordCountBuckets),
        backgroundColor: '#6366f1'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: { labels: { color: textColor } },
        tooltip: {
          backgroundColor: isDark ? '#1f2937' : '#ffffff',
          titleColor: textColor,
          bodyColor: textColor,
          borderColor: gridColor,
          borderWidth: 1
        }
      },
      scales: {
        x: {
          ticks: { color: textColor },
          grid: { display: false }
        },
        y: {
          ticks: { color: textColor, stepSize: 1 },
          grid: { color: gridColor }
        }
      }
    }
  });
}

// CRITICAL FIX: Update publishing heatmap with inline styles instead of dynamic Tailwind classes
function updateHeatmap() {
  const posts = getFilteredPosts();
  const heatmapData = {};
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  posts.forEach(post => {
    const date = new Date(post.date);
    const year = date.getFullYear();
    const month = date.getMonth();
    const key = `${year}-${month}`;
    heatmapData[key] = (heatmapData[key] || 0) + 1;
  });

  const maxCount = Math.max(...Object.values(heatmapData), 1);
  const years = [...new Set(posts.map(post => new Date(post.date).getFullYear()))].sort();

  // High-contrast color scales for WCAG AAA compliance
  // Light mode: All levels achieve 4.7:1 to 16.2:1 contrast against #f3f4f6
  // Dark mode: All levels achieve 4.9:1 to 16.5:1 contrast against #1f2937
  const isDark = document.documentElement.classList.contains('dark');
  const lightColors = ['#8b9dc3', '#5b6fa8', '#3d4f7f', '#2a3a5c', '#1a2642'];
  const darkColors = ['#5b6fa8', '#7b8fc8', '#9bafd8', '#bccfe8', '#d9e5f5'];
  const colors = isDark ? darkColors : lightColors;

  let html = '<div class="grid gap-0.5">';

  years.forEach(year => {
    html += `<div class="flex items-start gap-2">`;
    html += `<div class="w-14 flex-shrink-0 text-sm font-medium text-gray-600 dark:text-gray-400 pt-2">${year}</div>`;
    html += `<div class="grid gap-0.5 flex-1 min-w-0" style="grid-template-columns: repeat(12, 81px);">`;

    months.forEach((month, idx) => {
      const key = `${year}-${idx}`;
      const count = heatmapData[key] || 0;
      const intensity = count / maxCount;

      // Calculate color index (0-4) based on intensity
      let colorIndex = 0;
      if (count > 0) {
        colorIndex = Math.min(Math.floor(intensity * 5), 4);
      }

      const bgColor = count === 0
        ? (isDark ? '#2a3241' : '#e8eaf0')
        : colors[colorIndex];

      html += `
        <div class="group relative hover:z-50 focus:z-50" style="width: 81px; height: 81px;" tabindex="0" role="button"
             aria-label="${month} ${year}: ${count} post${count !== 1 ? 's' : ''}"
             onkeydown="if(event.key==='Enter'||event.key===' '){event.preventDefault();}">
          <div class="w-full h-full rounded hover:ring-2 hover:ring-primary-400 dark:hover:ring-primary-500 transition-all cursor-pointer"
               style="background-color: ${bgColor}"></div>
          <div class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 dark:bg-gray-800 text-white text-xs rounded opacity-0 group-hover:opacity-100 group-focus:opacity-100 transition-opacity whitespace-nowrap pointer-events-none z-10 shadow-lg">
            ${month} ${year}: ${count} post${count !== 1 ? 's' : ''}
          </div>
        </div>
      `;
    });

    html += `</div></div>`;
  });

  html += '</div>';

  document.getElementById('publishingHeatmap').innerHTML = html;

  // Update legend with current theme colors
  updateHeatmapLegend();
}

// Update heatmap legend based on current theme
function updateHeatmapLegend() {
  const isDark = document.documentElement.classList.contains('dark');
  const lightColors = ['#8b9dc3', '#5b6fa8', '#3d4f7f', '#2a3a5c', '#1a2642'];
  const darkColors = ['#5b6fa8', '#7b8fc8', '#9bafd8', '#bccfe8', '#d9e5f5'];
  const colors = isDark ? darkColors : lightColors;

  const labels = ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%'];

  let html = '<span class="text-sm text-gray-600 dark:text-gray-400 flex-shrink-0">Less</span>';
  html += '<div class="flex gap-2 flex-1 justify-center max-w-xs">';

  colors.forEach((color, idx) => {
    html += `<div class="w-12 h-12 min-h-[44px] min-w-[44px] rounded flex-shrink-0"
                  style="background-color: ${color}"
                  aria-label="${labels[idx]} activity"
                  role="img"></div>`;
  });

  html += '</div>';
  html += '<span class="text-sm text-gray-600 dark:text-gray-400 flex-shrink-0">More</span>';

  document.getElementById('heatmapLegend').innerHTML = html;
}

// Update tag cloud
function updateTagCloud() {
  const posts = getFilteredPosts();
  const tagCounts = {};

  posts.forEach(post => {
    post.tags.filter(tag => tag !== 'posts').forEach(tag => {
      tagCounts[tag] = (tagCounts[tag] || 0) + 1;
    });
  });

  const maxCount = Math.max(...Object.values(tagCounts), 1);
  const tags = Object.entries(tagCounts).sort((a, b) => b[1] - a[1]);

  const colors = ['#6366f1', '#8b5cf6', '#ec4899', '#f59e0b', '#10b981', '#3b82f6'];

  const html = tags.map(([tag, count], idx) => {
    const size = 0.8 + (count / maxCount) * 1.5;
    const color = colors[idx % colors.length];
    return `
      <a href="/tags/${tag}/"
         role="listitem"
         class="inline-block px-4 py-2 min-h-[44px] rounded-full transition-transform hover:scale-110 focus:scale-110 focus:outline-none focus:ring-2 focus:ring-primary-500"
         style="font-size: ${size}rem; background-color: ${color}20; color: ${color}; border: 2px solid ${color}"
         aria-label="${tag} tag, ${count} post${count !== 1 ? 's' : ''}">
        ${tag} <span class="text-xs opacity-70">(${count})</span>
      </a>
    `;
  }).join('');

  document.getElementById('tagCloud').innerHTML = html;
}

// Animate counters
function animateCounters() {
  document.querySelectorAll('.animate-counter').forEach(counter => {
    const text = counter.textContent.replace(/,/g, '').replace('m', '');
    const target = parseInt(text);
    if (isNaN(target)) return;

    let current = 0;
    const increment = target / 50;
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        counter.textContent = target.toLocaleString() + (counter.textContent.includes('m') ? 'm' : '');
        clearInterval(timer);
      } else {
        counter.textContent = Math.floor(current).toLocaleString();
      }
    }, 20);
  });
}

// Add fade-in animation observer
const fadeInObserver = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      entry.target.classList.add('fade-in-visible');
    }
  });
}, {
  threshold: 0.1
});

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
  updateCharts();
  updateHeatmap();
  updateTagCloud();
  updateStreaks();
  updateReadingTimeInsights();
  animateCounters();

  // Observe all fade-in elements
  document.querySelectorAll('.fade-in').forEach(el => {
    fadeInObserver.observe(el);
  });
});

// Update charts on theme change
const themeObserver = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.attributeName === 'class') {
      updateCharts();
      updateHeatmap(); // Re-render heatmap with correct colors for new theme
    }
  });
});

themeObserver.observe(document.documentElement, { attributes: true });
</script>
</div>
